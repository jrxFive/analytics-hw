/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FeatureUsage struct for FeatureUsage
type FeatureUsage struct {
	// an array of all of the organizations consumable features
	ConsumableFeatures []ConsumableFeatureFull `json:"consumable_features"`
	// an array of all of the organizations access features
	AccessFeatures []AccessFeature `json:"access_features"`
}

// NewFeatureUsage instantiates a new FeatureUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureUsage(consumableFeatures []ConsumableFeatureFull, accessFeatures []AccessFeature) *FeatureUsage {
	this := FeatureUsage{}
	this.ConsumableFeatures = consumableFeatures
	this.AccessFeatures = accessFeatures
	return &this
}

// NewFeatureUsageWithDefaults instantiates a new FeatureUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureUsageWithDefaults() *FeatureUsage {
	this := FeatureUsage{}
	return &this
}

// GetConsumableFeatures returns the ConsumableFeatures field value
func (o *FeatureUsage) GetConsumableFeatures() []ConsumableFeatureFull {
	if o == nil {
		var ret []ConsumableFeatureFull
		return ret
	}

	return o.ConsumableFeatures
}

// GetConsumableFeaturesOk returns a tuple with the ConsumableFeatures field value
// and a boolean to check if the value has been set.
func (o *FeatureUsage) GetConsumableFeaturesOk() (*[]ConsumableFeatureFull, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumableFeatures, true
}

// SetConsumableFeatures sets field value
func (o *FeatureUsage) SetConsumableFeatures(v []ConsumableFeatureFull) {
	o.ConsumableFeatures = v
}

// GetAccessFeatures returns the AccessFeatures field value
func (o *FeatureUsage) GetAccessFeatures() []AccessFeature {
	if o == nil {
		var ret []AccessFeature
		return ret
	}

	return o.AccessFeatures
}

// GetAccessFeaturesOk returns a tuple with the AccessFeatures field value
// and a boolean to check if the value has been set.
func (o *FeatureUsage) GetAccessFeaturesOk() (*[]AccessFeature, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessFeatures, true
}

// SetAccessFeatures sets field value
func (o *FeatureUsage) SetAccessFeatures(v []AccessFeature) {
	o.AccessFeatures = v
}

func (o FeatureUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["consumable_features"] = o.ConsumableFeatures
	}
	if true {
		toSerialize["access_features"] = o.AccessFeatures
	}
	return json.Marshal(toSerialize)
}

type NullableFeatureUsage struct {
	value *FeatureUsage
	isSet bool
}

func (v NullableFeatureUsage) Get() *FeatureUsage {
	return v.value
}

func (v *NullableFeatureUsage) Set(val *FeatureUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureUsage(val *FeatureUsage) *NullableFeatureUsage {
	return &NullableFeatureUsage{value: val, isSet: true}
}

func (v NullableFeatureUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
