/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Feedback struct for Feedback
type Feedback struct {
	Selection    *string `json:"selection,omitempty"`
	OptionalText *string `json:"optional_text,omitempty"`
}

// NewFeedback instantiates a new Feedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedback() *Feedback {
	this := Feedback{}
	return &this
}

// NewFeedbackWithDefaults instantiates a new Feedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackWithDefaults() *Feedback {
	this := Feedback{}
	return &this
}

// GetSelection returns the Selection field value if set, zero value otherwise.
func (o *Feedback) GetSelection() string {
	if o == nil || o.Selection == nil {
		var ret string
		return ret
	}
	return *o.Selection
}

// GetSelectionOk returns a tuple with the Selection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feedback) GetSelectionOk() (*string, bool) {
	if o == nil || o.Selection == nil {
		return nil, false
	}
	return o.Selection, true
}

// HasSelection returns a boolean if a field has been set.
func (o *Feedback) HasSelection() bool {
	if o != nil && o.Selection != nil {
		return true
	}

	return false
}

// SetSelection gets a reference to the given string and assigns it to the Selection field.
func (o *Feedback) SetSelection(v string) {
	o.Selection = &v
}

// GetOptionalText returns the OptionalText field value if set, zero value otherwise.
func (o *Feedback) GetOptionalText() string {
	if o == nil || o.OptionalText == nil {
		var ret string
		return ret
	}
	return *o.OptionalText
}

// GetOptionalTextOk returns a tuple with the OptionalText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feedback) GetOptionalTextOk() (*string, bool) {
	if o == nil || o.OptionalText == nil {
		return nil, false
	}
	return o.OptionalText, true
}

// HasOptionalText returns a boolean if a field has been set.
func (o *Feedback) HasOptionalText() bool {
	if o != nil && o.OptionalText != nil {
		return true
	}

	return false
}

// SetOptionalText gets a reference to the given string and assigns it to the OptionalText field.
func (o *Feedback) SetOptionalText(v string) {
	o.OptionalText = &v
}

func (o Feedback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Selection != nil {
		toSerialize["selection"] = o.Selection
	}
	if o.OptionalText != nil {
		toSerialize["optional_text"] = o.OptionalText
	}
	return json.Marshal(toSerialize)
}

type NullableFeedback struct {
	value *Feedback
	isSet bool
}

func (v NullableFeedback) Get() *Feedback {
	return v.value
}

func (v *NullableFeedback) Set(val *Feedback) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedback) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedback(val *Feedback) *NullableFeedback {
	return &NullableFeedback{value: val, isSet: true}
}

func (v NullableFeedback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
