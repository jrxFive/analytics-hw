/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupUpdate struct for GroupUpdate
type GroupUpdate struct {
	Bsds             *[]string `json:"bsds,omitempty"`
	Name             *string   `json:"name,omitempty"`
	OrganizationGuid *string   `json:"organization_guid,omitempty"`
}

// NewGroupUpdate instantiates a new GroupUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupUpdate() *GroupUpdate {
	this := GroupUpdate{}
	return &this
}

// NewGroupUpdateWithDefaults instantiates a new GroupUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupUpdateWithDefaults() *GroupUpdate {
	this := GroupUpdate{}
	return &this
}

// GetBsds returns the Bsds field value if set, zero value otherwise.
func (o *GroupUpdate) GetBsds() []string {
	if o == nil || o.Bsds == nil {
		var ret []string
		return ret
	}
	return *o.Bsds
}

// GetBsdsOk returns a tuple with the Bsds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdate) GetBsdsOk() (*[]string, bool) {
	if o == nil || o.Bsds == nil {
		return nil, false
	}
	return o.Bsds, true
}

// HasBsds returns a boolean if a field has been set.
func (o *GroupUpdate) HasBsds() bool {
	if o != nil && o.Bsds != nil {
		return true
	}

	return false
}

// SetBsds gets a reference to the given []string and assigns it to the Bsds field.
func (o *GroupUpdate) SetBsds(v []string) {
	o.Bsds = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupUpdate) SetName(v string) {
	o.Name = &v
}

// GetOrganizationGuid returns the OrganizationGuid field value if set, zero value otherwise.
func (o *GroupUpdate) GetOrganizationGuid() string {
	if o == nil || o.OrganizationGuid == nil {
		var ret string
		return ret
	}
	return *o.OrganizationGuid
}

// GetOrganizationGuidOk returns a tuple with the OrganizationGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUpdate) GetOrganizationGuidOk() (*string, bool) {
	if o == nil || o.OrganizationGuid == nil {
		return nil, false
	}
	return o.OrganizationGuid, true
}

// HasOrganizationGuid returns a boolean if a field has been set.
func (o *GroupUpdate) HasOrganizationGuid() bool {
	if o != nil && o.OrganizationGuid != nil {
		return true
	}

	return false
}

// SetOrganizationGuid gets a reference to the given string and assigns it to the OrganizationGuid field.
func (o *GroupUpdate) SetOrganizationGuid(v string) {
	o.OrganizationGuid = &v
}

func (o GroupUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bsds != nil {
		toSerialize["bsds"] = o.Bsds
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OrganizationGuid != nil {
		toSerialize["organization_guid"] = o.OrganizationGuid
	}
	return json.Marshal(toSerialize)
}

type NullableGroupUpdate struct {
	value *GroupUpdate
	isSet bool
}

func (v NullableGroupUpdate) Get() *GroupUpdate {
	return v.value
}

func (v *NullableGroupUpdate) Set(val *GroupUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUpdate(val *GroupUpdate) *NullableGroupUpdate {
	return &NullableGroupUpdate{value: val, isSet: true}
}

func (v NullableGroupUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
