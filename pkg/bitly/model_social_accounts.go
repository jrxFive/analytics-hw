/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SocialAccounts the model 'SocialAccounts'
type SocialAccounts string

// List of SocialAccounts
const (
	TWITTER  SocialAccounts = "twitter"
	FACEBOOK SocialAccounts = "facebook"
)

var allowedSocialAccountsEnumValues = []SocialAccounts{
	"twitter",
	"facebook",
}

func (v *SocialAccounts) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SocialAccounts(value)
	for _, existing := range allowedSocialAccountsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SocialAccounts", value)
}

// NewSocialAccountsFromValue returns a pointer to a valid SocialAccounts
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSocialAccountsFromValue(v string) (*SocialAccounts, error) {
	ev := SocialAccounts(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SocialAccounts: valid values are %v", v, allowedSocialAccountsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SocialAccounts) IsValid() bool {
	for _, existing := range allowedSocialAccountsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SocialAccounts value
func (v SocialAccounts) Ptr() *SocialAccounts {
	return &v
}

type NullableSocialAccounts struct {
	value *SocialAccounts
	isSet bool
}

func (v NullableSocialAccounts) Get() *SocialAccounts {
	return v.value
}

func (v *NullableSocialAccounts) Set(val *SocialAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSocialAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSocialAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSocialAccounts(val *SocialAccounts) *NullableSocialAccounts {
	return &NullableSocialAccounts{value: val, isSet: true}
}

func (v NullableSocialAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSocialAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
