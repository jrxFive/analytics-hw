/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LaunchpadButtonAppearance struct for LaunchpadButtonAppearance
type LaunchpadButtonAppearance struct {
	LaunchpadId      *string `json:"launchpad_id,omitempty"`
	ButtonBackground *string `json:"button_background,omitempty"`
	TextColor        *string `json:"text_color,omitempty"`
}

// NewLaunchpadButtonAppearance instantiates a new LaunchpadButtonAppearance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchpadButtonAppearance() *LaunchpadButtonAppearance {
	this := LaunchpadButtonAppearance{}
	return &this
}

// NewLaunchpadButtonAppearanceWithDefaults instantiates a new LaunchpadButtonAppearance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchpadButtonAppearanceWithDefaults() *LaunchpadButtonAppearance {
	this := LaunchpadButtonAppearance{}
	return &this
}

// GetLaunchpadId returns the LaunchpadId field value if set, zero value otherwise.
func (o *LaunchpadButtonAppearance) GetLaunchpadId() string {
	if o == nil || o.LaunchpadId == nil {
		var ret string
		return ret
	}
	return *o.LaunchpadId
}

// GetLaunchpadIdOk returns a tuple with the LaunchpadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchpadButtonAppearance) GetLaunchpadIdOk() (*string, bool) {
	if o == nil || o.LaunchpadId == nil {
		return nil, false
	}
	return o.LaunchpadId, true
}

// HasLaunchpadId returns a boolean if a field has been set.
func (o *LaunchpadButtonAppearance) HasLaunchpadId() bool {
	if o != nil && o.LaunchpadId != nil {
		return true
	}

	return false
}

// SetLaunchpadId gets a reference to the given string and assigns it to the LaunchpadId field.
func (o *LaunchpadButtonAppearance) SetLaunchpadId(v string) {
	o.LaunchpadId = &v
}

// GetButtonBackground returns the ButtonBackground field value if set, zero value otherwise.
func (o *LaunchpadButtonAppearance) GetButtonBackground() string {
	if o == nil || o.ButtonBackground == nil {
		var ret string
		return ret
	}
	return *o.ButtonBackground
}

// GetButtonBackgroundOk returns a tuple with the ButtonBackground field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchpadButtonAppearance) GetButtonBackgroundOk() (*string, bool) {
	if o == nil || o.ButtonBackground == nil {
		return nil, false
	}
	return o.ButtonBackground, true
}

// HasButtonBackground returns a boolean if a field has been set.
func (o *LaunchpadButtonAppearance) HasButtonBackground() bool {
	if o != nil && o.ButtonBackground != nil {
		return true
	}

	return false
}

// SetButtonBackground gets a reference to the given string and assigns it to the ButtonBackground field.
func (o *LaunchpadButtonAppearance) SetButtonBackground(v string) {
	o.ButtonBackground = &v
}

// GetTextColor returns the TextColor field value if set, zero value otherwise.
func (o *LaunchpadButtonAppearance) GetTextColor() string {
	if o == nil || o.TextColor == nil {
		var ret string
		return ret
	}
	return *o.TextColor
}

// GetTextColorOk returns a tuple with the TextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchpadButtonAppearance) GetTextColorOk() (*string, bool) {
	if o == nil || o.TextColor == nil {
		return nil, false
	}
	return o.TextColor, true
}

// HasTextColor returns a boolean if a field has been set.
func (o *LaunchpadButtonAppearance) HasTextColor() bool {
	if o != nil && o.TextColor != nil {
		return true
	}

	return false
}

// SetTextColor gets a reference to the given string and assigns it to the TextColor field.
func (o *LaunchpadButtonAppearance) SetTextColor(v string) {
	o.TextColor = &v
}

func (o LaunchpadButtonAppearance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LaunchpadId != nil {
		toSerialize["launchpad_id"] = o.LaunchpadId
	}
	if o.ButtonBackground != nil {
		toSerialize["button_background"] = o.ButtonBackground
	}
	if o.TextColor != nil {
		toSerialize["text_color"] = o.TextColor
	}
	return json.Marshal(toSerialize)
}

type NullableLaunchpadButtonAppearance struct {
	value *LaunchpadButtonAppearance
	isSet bool
}

func (v NullableLaunchpadButtonAppearance) Get() *LaunchpadButtonAppearance {
	return v.value
}

func (v *NullableLaunchpadButtonAppearance) Set(val *LaunchpadButtonAppearance) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchpadButtonAppearance) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchpadButtonAppearance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchpadButtonAppearance(val *LaunchpadButtonAppearance) *NullableLaunchpadButtonAppearance {
	return &NullableLaunchpadButtonAppearance{value: val, isSet: true}
}

func (v NullableLaunchpadButtonAppearance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchpadButtonAppearance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
