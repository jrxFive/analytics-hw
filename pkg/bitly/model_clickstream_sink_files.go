/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClickstreamSinkFiles struct for ClickstreamSinkFiles
type ClickstreamSinkFiles struct {
	// start of period
	DateFrom *string                `json:"date_from,omitempty"`
	Objects  *[]ClickstreamSinkFile `json:"objects,omitempty"`
	// Unique short id of sink file
	Id *string `json:"id,omitempty"`
	// Unique short id of clickstream
	ClickstreamId *string `json:"clickstream_id,omitempty"`
	// end of period
	DateTo *string `json:"date_to,omitempty"`
}

// NewClickstreamSinkFiles instantiates a new ClickstreamSinkFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickstreamSinkFiles() *ClickstreamSinkFiles {
	this := ClickstreamSinkFiles{}
	return &this
}

// NewClickstreamSinkFilesWithDefaults instantiates a new ClickstreamSinkFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickstreamSinkFilesWithDefaults() *ClickstreamSinkFiles {
	this := ClickstreamSinkFiles{}
	return &this
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise.
func (o *ClickstreamSinkFiles) GetDateFrom() string {
	if o == nil || o.DateFrom == nil {
		var ret string
		return ret
	}
	return *o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkFiles) GetDateFromOk() (*string, bool) {
	if o == nil || o.DateFrom == nil {
		return nil, false
	}
	return o.DateFrom, true
}

// HasDateFrom returns a boolean if a field has been set.
func (o *ClickstreamSinkFiles) HasDateFrom() bool {
	if o != nil && o.DateFrom != nil {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given string and assigns it to the DateFrom field.
func (o *ClickstreamSinkFiles) SetDateFrom(v string) {
	o.DateFrom = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *ClickstreamSinkFiles) GetObjects() []ClickstreamSinkFile {
	if o == nil || o.Objects == nil {
		var ret []ClickstreamSinkFile
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkFiles) GetObjectsOk() (*[]ClickstreamSinkFile, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *ClickstreamSinkFiles) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []ClickstreamSinkFile and assigns it to the Objects field.
func (o *ClickstreamSinkFiles) SetObjects(v []ClickstreamSinkFile) {
	o.Objects = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClickstreamSinkFiles) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkFiles) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClickstreamSinkFiles) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClickstreamSinkFiles) SetId(v string) {
	o.Id = &v
}

// GetClickstreamId returns the ClickstreamId field value if set, zero value otherwise.
func (o *ClickstreamSinkFiles) GetClickstreamId() string {
	if o == nil || o.ClickstreamId == nil {
		var ret string
		return ret
	}
	return *o.ClickstreamId
}

// GetClickstreamIdOk returns a tuple with the ClickstreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkFiles) GetClickstreamIdOk() (*string, bool) {
	if o == nil || o.ClickstreamId == nil {
		return nil, false
	}
	return o.ClickstreamId, true
}

// HasClickstreamId returns a boolean if a field has been set.
func (o *ClickstreamSinkFiles) HasClickstreamId() bool {
	if o != nil && o.ClickstreamId != nil {
		return true
	}

	return false
}

// SetClickstreamId gets a reference to the given string and assigns it to the ClickstreamId field.
func (o *ClickstreamSinkFiles) SetClickstreamId(v string) {
	o.ClickstreamId = &v
}

// GetDateTo returns the DateTo field value if set, zero value otherwise.
func (o *ClickstreamSinkFiles) GetDateTo() string {
	if o == nil || o.DateTo == nil {
		var ret string
		return ret
	}
	return *o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkFiles) GetDateToOk() (*string, bool) {
	if o == nil || o.DateTo == nil {
		return nil, false
	}
	return o.DateTo, true
}

// HasDateTo returns a boolean if a field has been set.
func (o *ClickstreamSinkFiles) HasDateTo() bool {
	if o != nil && o.DateTo != nil {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given string and assigns it to the DateTo field.
func (o *ClickstreamSinkFiles) SetDateTo(v string) {
	o.DateTo = &v
}

func (o ClickstreamSinkFiles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateFrom != nil {
		toSerialize["date_from"] = o.DateFrom
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ClickstreamId != nil {
		toSerialize["clickstream_id"] = o.ClickstreamId
	}
	if o.DateTo != nil {
		toSerialize["date_to"] = o.DateTo
	}
	return json.Marshal(toSerialize)
}

type NullableClickstreamSinkFiles struct {
	value *ClickstreamSinkFiles
	isSet bool
}

func (v NullableClickstreamSinkFiles) Get() *ClickstreamSinkFiles {
	return v.value
}

func (v *NullableClickstreamSinkFiles) Set(val *ClickstreamSinkFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableClickstreamSinkFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableClickstreamSinkFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickstreamSinkFiles(val *ClickstreamSinkFiles) *NullableClickstreamSinkFiles {
	return &NullableClickstreamSinkFiles{value: val, isSet: true}
}

func (v NullableClickstreamSinkFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickstreamSinkFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
