/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvitationsForLogin struct for InvitationsForLogin
type InvitationsForLogin struct {
	Invitations *[]InvitationForLogin `json:"invitations,omitempty"`
}

// NewInvitationsForLogin instantiates a new InvitationsForLogin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitationsForLogin() *InvitationsForLogin {
	this := InvitationsForLogin{}
	return &this
}

// NewInvitationsForLoginWithDefaults instantiates a new InvitationsForLogin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationsForLoginWithDefaults() *InvitationsForLogin {
	this := InvitationsForLogin{}
	return &this
}

// GetInvitations returns the Invitations field value if set, zero value otherwise.
func (o *InvitationsForLogin) GetInvitations() []InvitationForLogin {
	if o == nil || o.Invitations == nil {
		var ret []InvitationForLogin
		return ret
	}
	return *o.Invitations
}

// GetInvitationsOk returns a tuple with the Invitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationsForLogin) GetInvitationsOk() (*[]InvitationForLogin, bool) {
	if o == nil || o.Invitations == nil {
		return nil, false
	}
	return o.Invitations, true
}

// HasInvitations returns a boolean if a field has been set.
func (o *InvitationsForLogin) HasInvitations() bool {
	if o != nil && o.Invitations != nil {
		return true
	}

	return false
}

// SetInvitations gets a reference to the given []InvitationForLogin and assigns it to the Invitations field.
func (o *InvitationsForLogin) SetInvitations(v []InvitationForLogin) {
	o.Invitations = &v
}

func (o InvitationsForLogin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Invitations != nil {
		toSerialize["invitations"] = o.Invitations
	}
	return json.Marshal(toSerialize)
}

type NullableInvitationsForLogin struct {
	value *InvitationsForLogin
	isSet bool
}

func (v NullableInvitationsForLogin) Get() *InvitationsForLogin {
	return v.value
}

func (v *NullableInvitationsForLogin) Set(val *InvitationsForLogin) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationsForLogin) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationsForLogin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationsForLogin(val *InvitationsForLogin) *NullableInvitationsForLogin {
	return &NullableInvitationsForLogin{value: val, isSet: true}
}

func (v NullableInvitationsForLogin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationsForLogin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
