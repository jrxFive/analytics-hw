/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DataExportQuery struct for DataExportQuery
type DataExportQuery struct {
	Archived      *string   `json:"archived,omitempty"`
	UnitReference *int32    `json:"unit_reference,omitempty"`
	LinkDeeplinks *string   `json:"link_deeplinks,omitempty"`
	Tags          *[]string `json:"tags,omitempty"`
	CampaignIds   *[]string `json:"campaign_ids,omitempty"`
	ModifiedAfter *int32    `json:"modified_after,omitempty"`
	Keyword       *string   `json:"keyword,omitempty"`
	CreatedAfter  *int32    `json:"created_after,omitempty"`
	CustomBitlink *string   `json:"custom_bitlink,omitempty"`
	Units         *int32    `json:"units,omitempty"`
	Query         *string   `json:"query,omitempty"`
	ReportType    *string   `json:"report_type,omitempty"`
	CreatedBefore *int32    `json:"created_before,omitempty"`
	Emails        *[]string `json:"emails,omitempty"`
	Unit          *string   `json:"unit,omitempty"`
}

// NewDataExportQuery instantiates a new DataExportQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataExportQuery() *DataExportQuery {
	this := DataExportQuery{}
	return &this
}

// NewDataExportQueryWithDefaults instantiates a new DataExportQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataExportQueryWithDefaults() *DataExportQuery {
	this := DataExportQuery{}
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *DataExportQuery) GetArchived() string {
	if o == nil || o.Archived == nil {
		var ret string
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetArchivedOk() (*string, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *DataExportQuery) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given string and assigns it to the Archived field.
func (o *DataExportQuery) SetArchived(v string) {
	o.Archived = &v
}

// GetUnitReference returns the UnitReference field value if set, zero value otherwise.
func (o *DataExportQuery) GetUnitReference() int32 {
	if o == nil || o.UnitReference == nil {
		var ret int32
		return ret
	}
	return *o.UnitReference
}

// GetUnitReferenceOk returns a tuple with the UnitReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetUnitReferenceOk() (*int32, bool) {
	if o == nil || o.UnitReference == nil {
		return nil, false
	}
	return o.UnitReference, true
}

// HasUnitReference returns a boolean if a field has been set.
func (o *DataExportQuery) HasUnitReference() bool {
	if o != nil && o.UnitReference != nil {
		return true
	}

	return false
}

// SetUnitReference gets a reference to the given int32 and assigns it to the UnitReference field.
func (o *DataExportQuery) SetUnitReference(v int32) {
	o.UnitReference = &v
}

// GetLinkDeeplinks returns the LinkDeeplinks field value if set, zero value otherwise.
func (o *DataExportQuery) GetLinkDeeplinks() string {
	if o == nil || o.LinkDeeplinks == nil {
		var ret string
		return ret
	}
	return *o.LinkDeeplinks
}

// GetLinkDeeplinksOk returns a tuple with the LinkDeeplinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetLinkDeeplinksOk() (*string, bool) {
	if o == nil || o.LinkDeeplinks == nil {
		return nil, false
	}
	return o.LinkDeeplinks, true
}

// HasLinkDeeplinks returns a boolean if a field has been set.
func (o *DataExportQuery) HasLinkDeeplinks() bool {
	if o != nil && o.LinkDeeplinks != nil {
		return true
	}

	return false
}

// SetLinkDeeplinks gets a reference to the given string and assigns it to the LinkDeeplinks field.
func (o *DataExportQuery) SetLinkDeeplinks(v string) {
	o.LinkDeeplinks = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DataExportQuery) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DataExportQuery) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DataExportQuery) SetTags(v []string) {
	o.Tags = &v
}

// GetCampaignIds returns the CampaignIds field value if set, zero value otherwise.
func (o *DataExportQuery) GetCampaignIds() []string {
	if o == nil || o.CampaignIds == nil {
		var ret []string
		return ret
	}
	return *o.CampaignIds
}

// GetCampaignIdsOk returns a tuple with the CampaignIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetCampaignIdsOk() (*[]string, bool) {
	if o == nil || o.CampaignIds == nil {
		return nil, false
	}
	return o.CampaignIds, true
}

// HasCampaignIds returns a boolean if a field has been set.
func (o *DataExportQuery) HasCampaignIds() bool {
	if o != nil && o.CampaignIds != nil {
		return true
	}

	return false
}

// SetCampaignIds gets a reference to the given []string and assigns it to the CampaignIds field.
func (o *DataExportQuery) SetCampaignIds(v []string) {
	o.CampaignIds = &v
}

// GetModifiedAfter returns the ModifiedAfter field value if set, zero value otherwise.
func (o *DataExportQuery) GetModifiedAfter() int32 {
	if o == nil || o.ModifiedAfter == nil {
		var ret int32
		return ret
	}
	return *o.ModifiedAfter
}

// GetModifiedAfterOk returns a tuple with the ModifiedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetModifiedAfterOk() (*int32, bool) {
	if o == nil || o.ModifiedAfter == nil {
		return nil, false
	}
	return o.ModifiedAfter, true
}

// HasModifiedAfter returns a boolean if a field has been set.
func (o *DataExportQuery) HasModifiedAfter() bool {
	if o != nil && o.ModifiedAfter != nil {
		return true
	}

	return false
}

// SetModifiedAfter gets a reference to the given int32 and assigns it to the ModifiedAfter field.
func (o *DataExportQuery) SetModifiedAfter(v int32) {
	o.ModifiedAfter = &v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *DataExportQuery) GetKeyword() string {
	if o == nil || o.Keyword == nil {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetKeywordOk() (*string, bool) {
	if o == nil || o.Keyword == nil {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *DataExportQuery) HasKeyword() bool {
	if o != nil && o.Keyword != nil {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *DataExportQuery) SetKeyword(v string) {
	o.Keyword = &v
}

// GetCreatedAfter returns the CreatedAfter field value if set, zero value otherwise.
func (o *DataExportQuery) GetCreatedAfter() int32 {
	if o == nil || o.CreatedAfter == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAfter
}

// GetCreatedAfterOk returns a tuple with the CreatedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetCreatedAfterOk() (*int32, bool) {
	if o == nil || o.CreatedAfter == nil {
		return nil, false
	}
	return o.CreatedAfter, true
}

// HasCreatedAfter returns a boolean if a field has been set.
func (o *DataExportQuery) HasCreatedAfter() bool {
	if o != nil && o.CreatedAfter != nil {
		return true
	}

	return false
}

// SetCreatedAfter gets a reference to the given int32 and assigns it to the CreatedAfter field.
func (o *DataExportQuery) SetCreatedAfter(v int32) {
	o.CreatedAfter = &v
}

// GetCustomBitlink returns the CustomBitlink field value if set, zero value otherwise.
func (o *DataExportQuery) GetCustomBitlink() string {
	if o == nil || o.CustomBitlink == nil {
		var ret string
		return ret
	}
	return *o.CustomBitlink
}

// GetCustomBitlinkOk returns a tuple with the CustomBitlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetCustomBitlinkOk() (*string, bool) {
	if o == nil || o.CustomBitlink == nil {
		return nil, false
	}
	return o.CustomBitlink, true
}

// HasCustomBitlink returns a boolean if a field has been set.
func (o *DataExportQuery) HasCustomBitlink() bool {
	if o != nil && o.CustomBitlink != nil {
		return true
	}

	return false
}

// SetCustomBitlink gets a reference to the given string and assigns it to the CustomBitlink field.
func (o *DataExportQuery) SetCustomBitlink(v string) {
	o.CustomBitlink = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *DataExportQuery) GetUnits() int32 {
	if o == nil || o.Units == nil {
		var ret int32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetUnitsOk() (*int32, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *DataExportQuery) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int32 and assigns it to the Units field.
func (o *DataExportQuery) SetUnits(v int32) {
	o.Units = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DataExportQuery) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DataExportQuery) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *DataExportQuery) SetQuery(v string) {
	o.Query = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *DataExportQuery) GetReportType() string {
	if o == nil || o.ReportType == nil {
		var ret string
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetReportTypeOk() (*string, bool) {
	if o == nil || o.ReportType == nil {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *DataExportQuery) HasReportType() bool {
	if o != nil && o.ReportType != nil {
		return true
	}

	return false
}

// SetReportType gets a reference to the given string and assigns it to the ReportType field.
func (o *DataExportQuery) SetReportType(v string) {
	o.ReportType = &v
}

// GetCreatedBefore returns the CreatedBefore field value if set, zero value otherwise.
func (o *DataExportQuery) GetCreatedBefore() int32 {
	if o == nil || o.CreatedBefore == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBefore
}

// GetCreatedBeforeOk returns a tuple with the CreatedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetCreatedBeforeOk() (*int32, bool) {
	if o == nil || o.CreatedBefore == nil {
		return nil, false
	}
	return o.CreatedBefore, true
}

// HasCreatedBefore returns a boolean if a field has been set.
func (o *DataExportQuery) HasCreatedBefore() bool {
	if o != nil && o.CreatedBefore != nil {
		return true
	}

	return false
}

// SetCreatedBefore gets a reference to the given int32 and assigns it to the CreatedBefore field.
func (o *DataExportQuery) SetCreatedBefore(v int32) {
	o.CreatedBefore = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *DataExportQuery) GetEmails() []string {
	if o == nil || o.Emails == nil {
		var ret []string
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetEmailsOk() (*[]string, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *DataExportQuery) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *DataExportQuery) SetEmails(v []string) {
	o.Emails = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DataExportQuery) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataExportQuery) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DataExportQuery) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *DataExportQuery) SetUnit(v string) {
	o.Unit = &v
}

func (o DataExportQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.UnitReference != nil {
		toSerialize["unit_reference"] = o.UnitReference
	}
	if o.LinkDeeplinks != nil {
		toSerialize["link_deeplinks"] = o.LinkDeeplinks
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CampaignIds != nil {
		toSerialize["campaign_ids"] = o.CampaignIds
	}
	if o.ModifiedAfter != nil {
		toSerialize["modified_after"] = o.ModifiedAfter
	}
	if o.Keyword != nil {
		toSerialize["keyword"] = o.Keyword
	}
	if o.CreatedAfter != nil {
		toSerialize["created_after"] = o.CreatedAfter
	}
	if o.CustomBitlink != nil {
		toSerialize["custom_bitlink"] = o.CustomBitlink
	}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.ReportType != nil {
		toSerialize["report_type"] = o.ReportType
	}
	if o.CreatedBefore != nil {
		toSerialize["created_before"] = o.CreatedBefore
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableDataExportQuery struct {
	value *DataExportQuery
	isSet bool
}

func (v NullableDataExportQuery) Get() *DataExportQuery {
	return v.value
}

func (v *NullableDataExportQuery) Set(val *DataExportQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDataExportQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDataExportQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataExportQuery(val *DataExportQuery) *NullableDataExportQuery {
	return &NullableDataExportQuery{value: val, isSet: true}
}

func (v NullableDataExportQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataExportQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
