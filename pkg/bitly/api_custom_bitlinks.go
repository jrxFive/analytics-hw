/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type CustomBitlinksApi interface {

	/*
		AddCustomBitlink Add Custom Bitlink

		Add a keyword (or "custom back-half") to a Bitlink with a Custom Domain. This endpoint can also be used for initial redirects to a link.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiAddCustomBitlinkRequest
	*/
	AddCustomBitlink(ctx _context.Context) ApiAddCustomBitlinkRequest

	// AddCustomBitlinkExecute executes the request
	//  @return CustomBitlink
	AddCustomBitlinkExecute(r ApiAddCustomBitlinkRequest) (CustomBitlink, *_nethttp.Response, error)

	/*
		GetClicksForCustomBitlink GetByCountries Clicks for a Custom Bitlink's Entire History

		Returns the click counts for the specified link. This returns an array with clicks based on a date.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param customBitlink A Custom Bitlink made of the domain and keyword
		 @return ApiGetClicksForCustomBitlinkRequest
	*/
	GetClicksForCustomBitlink(ctx _context.Context, customBitlink string) ApiGetClicksForCustomBitlinkRequest

	// GetClicksForCustomBitlinkExecute executes the request
	//  @return Clicks
	GetClicksForCustomBitlinkExecute(r ApiGetClicksForCustomBitlinkRequest) (Clicks, *_nethttp.Response, error)

	/*
		GetCustomBitlink Retrieve Custom Bitlink

		Returns the details and history of the specified link.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param customBitlink A Custom Bitlink made of the domain and keyword
		 @return ApiGetCustomBitlinkRequest
	*/
	GetCustomBitlink(ctx _context.Context, customBitlink string) ApiGetCustomBitlinkRequest

	// GetCustomBitlinkExecute executes the request
	//  @return CustomBitlink
	GetCustomBitlinkExecute(r ApiGetCustomBitlinkRequest) (CustomBitlink, *_nethttp.Response, error)

	/*
		GetCustomBitlinkMetricsByDestination GetByCountries Metrics for a Custom Bitlink by Destination

		Returns click metrics for the specified link by its historical destinations.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param customBitlink A Custom Bitlink made of the domain and keyword
		 @return ApiGetCustomBitlinkMetricsByDestinationRequest
	*/
	GetCustomBitlinkMetricsByDestination(ctx _context.Context, customBitlink string) ApiGetCustomBitlinkMetricsByDestinationRequest

	// GetCustomBitlinkMetricsByDestinationExecute executes the request
	//  @return ClickMetrics
	GetCustomBitlinkMetricsByDestinationExecute(r ApiGetCustomBitlinkMetricsByDestinationRequest) (ClickMetrics, *_nethttp.Response, error)

	/*
		UpdateCustomBitlink Update Custom Bitlink

		Move a keyword (or custom back-half) to a different Bitlink.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param customBitlink A Custom Bitlink made of the domain and keyword
		 @return ApiUpdateCustomBitlinkRequest
	*/
	UpdateCustomBitlink(ctx _context.Context, customBitlink string) ApiUpdateCustomBitlinkRequest

	// UpdateCustomBitlinkExecute executes the request
	//  @return CustomBitlink
	UpdateCustomBitlinkExecute(r ApiUpdateCustomBitlinkRequest) (CustomBitlink, *_nethttp.Response, error)
}

// CustomBitlinksApiService CustomBitlinksApi service
type CustomBitlinksApiService service

type ApiAddCustomBitlinkRequest struct {
	ctx              _context.Context
	ApiService       CustomBitlinksApi
	addCustomBitlink *AddCustomBitlink
}

func (r ApiAddCustomBitlinkRequest) AddCustomBitlink(addCustomBitlink AddCustomBitlink) ApiAddCustomBitlinkRequest {
	r.addCustomBitlink = &addCustomBitlink
	return r
}

func (r ApiAddCustomBitlinkRequest) Execute() (CustomBitlink, *_nethttp.Response, error) {
	return r.ApiService.AddCustomBitlinkExecute(r)
}

/*
AddCustomBitlink Add Custom Bitlink

Add a keyword (or "custom back-half") to a Bitlink with a Custom Domain. This endpoint can also be used for initial redirects to a link.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddCustomBitlinkRequest
*/
func (a *CustomBitlinksApiService) AddCustomBitlink(ctx _context.Context) ApiAddCustomBitlinkRequest {
	return ApiAddCustomBitlinkRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return CustomBitlink
func (a *CustomBitlinksApiService) AddCustomBitlinkExecute(r ApiAddCustomBitlinkRequest) (CustomBitlink, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomBitlink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomBitlinksApiService.AddCustomBitlink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_bitlinks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.addCustomBitlink == nil {
		return localVarReturnValue, nil, reportError("addCustomBitlink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addCustomBitlink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v UnprocessableEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v UpgradeRequired
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Forbidden
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v TemporarilyUnavailable
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFound
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClicksForCustomBitlinkRequest struct {
	ctx           _context.Context
	ApiService    CustomBitlinksApi
	customBitlink string
	unit          *TimeUnit
	units         *int32
	unitReference *string
}

// A unit of time
func (r ApiGetClicksForCustomBitlinkRequest) Unit(unit TimeUnit) ApiGetClicksForCustomBitlinkRequest {
	r.unit = &unit
	return r
}

// An integer representing the time units to query data for. pass -1 to return all units of time.
func (r ApiGetClicksForCustomBitlinkRequest) Units(units int32) ApiGetClicksForCustomBitlinkRequest {
	r.units = &units
	return r
}

// An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time.
func (r ApiGetClicksForCustomBitlinkRequest) UnitReference(unitReference string) ApiGetClicksForCustomBitlinkRequest {
	r.unitReference = &unitReference
	return r
}

func (r ApiGetClicksForCustomBitlinkRequest) Execute() (Clicks, *_nethttp.Response, error) {
	return r.ApiService.GetClicksForCustomBitlinkExecute(r)
}

/*
GetClicksForCustomBitlink GetByCountries Clicks for a Custom Bitlink's Entire History

Returns the click counts for the specified link. This returns an array with clicks based on a date.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customBitlink A Custom Bitlink made of the domain and keyword
 @return ApiGetClicksForCustomBitlinkRequest
*/
func (a *CustomBitlinksApiService) GetClicksForCustomBitlink(ctx _context.Context, customBitlink string) ApiGetClicksForCustomBitlinkRequest {
	return ApiGetClicksForCustomBitlinkRequest{
		ApiService:    a,
		ctx:           ctx,
		customBitlink: customBitlink,
	}
}

// Execute executes the request
//  @return Clicks
func (a *CustomBitlinksApiService) GetClicksForCustomBitlinkExecute(r ApiGetClicksForCustomBitlinkRequest) (Clicks, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Clicks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomBitlinksApiService.GetClicksForCustomBitlink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_bitlinks/{custom_bitlink}/clicks"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_bitlink"+"}", _neturl.PathEscape(parameterToString(r.customBitlink, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.unit == nil {
		return localVarReturnValue, nil, reportError("unit is required and must be specified")
	}
	if r.units == nil {
		return localVarReturnValue, nil, reportError("units is required and must be specified")
	}

	localVarQueryParams.Add("unit", parameterToString(*r.unit, ""))
	localVarQueryParams.Add("units", parameterToString(*r.units, ""))
	if r.unitReference != nil {
		localVarQueryParams.Add("unit_reference", parameterToString(*r.unitReference, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v UpgradeRequired
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Forbidden
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v TemporarilyUnavailable
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFound
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomBitlinkRequest struct {
	ctx           _context.Context
	ApiService    CustomBitlinksApi
	customBitlink string
}

func (r ApiGetCustomBitlinkRequest) Execute() (CustomBitlink, *_nethttp.Response, error) {
	return r.ApiService.GetCustomBitlinkExecute(r)
}

/*
GetCustomBitlink Retrieve Custom Bitlink

Returns the details and history of the specified link.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customBitlink A Custom Bitlink made of the domain and keyword
 @return ApiGetCustomBitlinkRequest
*/
func (a *CustomBitlinksApiService) GetCustomBitlink(ctx _context.Context, customBitlink string) ApiGetCustomBitlinkRequest {
	return ApiGetCustomBitlinkRequest{
		ApiService:    a,
		ctx:           ctx,
		customBitlink: customBitlink,
	}
}

// Execute executes the request
//  @return CustomBitlink
func (a *CustomBitlinksApiService) GetCustomBitlinkExecute(r ApiGetCustomBitlinkRequest) (CustomBitlink, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomBitlink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomBitlinksApiService.GetCustomBitlink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_bitlinks/{custom_bitlink}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_bitlink"+"}", _neturl.PathEscape(parameterToString(r.customBitlink, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v UpgradeRequired
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Forbidden
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v TemporarilyUnavailable
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFound
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomBitlinkMetricsByDestinationRequest struct {
	ctx           _context.Context
	ApiService    CustomBitlinksApi
	customBitlink string
	unit          *TimeUnit
	units         *int32
	unitReference *string
}

// A unit of time
func (r ApiGetCustomBitlinkMetricsByDestinationRequest) Unit(unit TimeUnit) ApiGetCustomBitlinkMetricsByDestinationRequest {
	r.unit = &unit
	return r
}

// An integer representing the time units to query data for. pass -1 to return all units of time.
func (r ApiGetCustomBitlinkMetricsByDestinationRequest) Units(units int32) ApiGetCustomBitlinkMetricsByDestinationRequest {
	r.units = &units
	return r
}

// An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time.
func (r ApiGetCustomBitlinkMetricsByDestinationRequest) UnitReference(unitReference string) ApiGetCustomBitlinkMetricsByDestinationRequest {
	r.unitReference = &unitReference
	return r
}

func (r ApiGetCustomBitlinkMetricsByDestinationRequest) Execute() (ClickMetrics, *_nethttp.Response, error) {
	return r.ApiService.GetCustomBitlinkMetricsByDestinationExecute(r)
}

/*
GetCustomBitlinkMetricsByDestination GetByCountries Metrics for a Custom Bitlink by Destination

Returns click metrics for the specified link by its historical destinations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customBitlink A Custom Bitlink made of the domain and keyword
 @return ApiGetCustomBitlinkMetricsByDestinationRequest
*/
func (a *CustomBitlinksApiService) GetCustomBitlinkMetricsByDestination(ctx _context.Context, customBitlink string) ApiGetCustomBitlinkMetricsByDestinationRequest {
	return ApiGetCustomBitlinkMetricsByDestinationRequest{
		ApiService:    a,
		ctx:           ctx,
		customBitlink: customBitlink,
	}
}

// Execute executes the request
//  @return ClickMetrics
func (a *CustomBitlinksApiService) GetCustomBitlinkMetricsByDestinationExecute(r ApiGetCustomBitlinkMetricsByDestinationRequest) (ClickMetrics, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClickMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomBitlinksApiService.GetCustomBitlinkMetricsByDestination")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_bitlinks/{custom_bitlink}/clicks_by_destination"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_bitlink"+"}", _neturl.PathEscape(parameterToString(r.customBitlink, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.unit == nil {
		return localVarReturnValue, nil, reportError("unit is required and must be specified")
	}
	if r.units == nil {
		return localVarReturnValue, nil, reportError("units is required and must be specified")
	}

	localVarQueryParams.Add("unit", parameterToString(*r.unit, ""))
	localVarQueryParams.Add("units", parameterToString(*r.units, ""))
	if r.unitReference != nil {
		localVarQueryParams.Add("unit_reference", parameterToString(*r.unitReference, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v UpgradeRequired
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Forbidden
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v TemporarilyUnavailable
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFound
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomBitlinkRequest struct {
	ctx                 _context.Context
	ApiService          CustomBitlinksApi
	customBitlink       string
	updateCustomBitlink *UpdateCustomBitlink
}

func (r ApiUpdateCustomBitlinkRequest) UpdateCustomBitlink(updateCustomBitlink UpdateCustomBitlink) ApiUpdateCustomBitlinkRequest {
	r.updateCustomBitlink = &updateCustomBitlink
	return r
}

func (r ApiUpdateCustomBitlinkRequest) Execute() (CustomBitlink, *_nethttp.Response, error) {
	return r.ApiService.UpdateCustomBitlinkExecute(r)
}

/*
UpdateCustomBitlink Update Custom Bitlink

Move a keyword (or custom back-half) to a different Bitlink.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customBitlink A Custom Bitlink made of the domain and keyword
 @return ApiUpdateCustomBitlinkRequest
*/
func (a *CustomBitlinksApiService) UpdateCustomBitlink(ctx _context.Context, customBitlink string) ApiUpdateCustomBitlinkRequest {
	return ApiUpdateCustomBitlinkRequest{
		ApiService:    a,
		ctx:           ctx,
		customBitlink: customBitlink,
	}
}

// Execute executes the request
//  @return CustomBitlink
func (a *CustomBitlinksApiService) UpdateCustomBitlinkExecute(r ApiUpdateCustomBitlinkRequest) (CustomBitlink, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomBitlink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomBitlinksApiService.UpdateCustomBitlink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_bitlinks/{custom_bitlink}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_bitlink"+"}", _neturl.PathEscape(parameterToString(r.customBitlink, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updateCustomBitlink == nil {
		return localVarReturnValue, nil, reportError("updateCustomBitlink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateCustomBitlink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v UnprocessableEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v UpgradeRequired
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Forbidden
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFound
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v TemporarilyUnavailable
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
