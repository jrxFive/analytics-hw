/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Groups struct for Groups
type Groups struct {
	Groups []Group `json:"groups"`
}

// NewGroups instantiates a new Groups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroups(groups []Group) *Groups {
	this := Groups{}
	this.Groups = groups
	return &this
}

// NewGroupsWithDefaults instantiates a new Groups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupsWithDefaults() *Groups {
	this := Groups{}
	return &this
}

// GetGroups returns the Groups field value
func (o *Groups) GetGroups() []Group {
	if o == nil {
		var ret []Group
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *Groups) GetGroupsOk() (*[]Group, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Groups, true
}

// SetGroups sets field value
func (o *Groups) SetGroups(v []Group) {
	o.Groups = v
}

func (o Groups) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["groups"] = o.Groups
	}
	return json.Marshal(toSerialize)
}

type NullableGroups struct {
	value *Groups
	isSet bool
}

func (v NullableGroups) Get() *Groups {
	return v.value
}

func (v *NullableGroups) Set(val *Groups) {
	v.value = val
	v.isSet = true
}

func (v NullableGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroups(val *Groups) *NullableGroups {
	return &NullableGroups{value: val, isSet: true}
}

func (v NullableGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
