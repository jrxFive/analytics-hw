/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ViewMetric struct for ViewMetric
type ViewMetric struct {
	Value *string `json:"value,omitempty"`
	Views *int32  `json:"views,omitempty"`
}

// NewViewMetric instantiates a new ViewMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewMetric() *ViewMetric {
	this := ViewMetric{}
	return &this
}

// NewViewMetricWithDefaults instantiates a new ViewMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewMetricWithDefaults() *ViewMetric {
	this := ViewMetric{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ViewMetric) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewMetric) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ViewMetric) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ViewMetric) SetValue(v string) {
	o.Value = &v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *ViewMetric) GetViews() int32 {
	if o == nil || o.Views == nil {
		var ret int32
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewMetric) GetViewsOk() (*int32, bool) {
	if o == nil || o.Views == nil {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *ViewMetric) HasViews() bool {
	if o != nil && o.Views != nil {
		return true
	}

	return false
}

// SetViews gets a reference to the given int32 and assigns it to the Views field.
func (o *ViewMetric) SetViews(v int32) {
	o.Views = &v
}

func (o ViewMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Views != nil {
		toSerialize["views"] = o.Views
	}
	return json.Marshal(toSerialize)
}

type NullableViewMetric struct {
	value *ViewMetric
	isSet bool
}

func (v NullableViewMetric) Get() *ViewMetric {
	return v.value
}

func (v *NullableViewMetric) Set(val *ViewMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableViewMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableViewMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewMetric(val *ViewMetric) *NullableViewMetric {
	return &NullableViewMetric{value: val, isSet: true}
}

func (v NullableViewMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
