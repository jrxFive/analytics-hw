/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClicksCount struct for ClicksCount
type ClicksCount struct {
	Error     *string `json:"error,omitempty"`
	Clicks    *int32  `json:"clicks,omitempty"`
	BitlinkId *string `json:"bitlink_id,omitempty"`
}

// NewClicksCount instantiates a new ClicksCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClicksCount() *ClicksCount {
	this := ClicksCount{}
	return &this
}

// NewClicksCountWithDefaults instantiates a new ClicksCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClicksCountWithDefaults() *ClicksCount {
	this := ClicksCount{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ClicksCount) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClicksCount) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ClicksCount) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ClicksCount) SetError(v string) {
	o.Error = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *ClicksCount) GetClicks() int32 {
	if o == nil || o.Clicks == nil {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClicksCount) GetClicksOk() (*int32, bool) {
	if o == nil || o.Clicks == nil {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *ClicksCount) HasClicks() bool {
	if o != nil && o.Clicks != nil {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *ClicksCount) SetClicks(v int32) {
	o.Clicks = &v
}

// GetBitlinkId returns the BitlinkId field value if set, zero value otherwise.
func (o *ClicksCount) GetBitlinkId() string {
	if o == nil || o.BitlinkId == nil {
		var ret string
		return ret
	}
	return *o.BitlinkId
}

// GetBitlinkIdOk returns a tuple with the BitlinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClicksCount) GetBitlinkIdOk() (*string, bool) {
	if o == nil || o.BitlinkId == nil {
		return nil, false
	}
	return o.BitlinkId, true
}

// HasBitlinkId returns a boolean if a field has been set.
func (o *ClicksCount) HasBitlinkId() bool {
	if o != nil && o.BitlinkId != nil {
		return true
	}

	return false
}

// SetBitlinkId gets a reference to the given string and assigns it to the BitlinkId field.
func (o *ClicksCount) SetBitlinkId(v string) {
	o.BitlinkId = &v
}

func (o ClicksCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Clicks != nil {
		toSerialize["clicks"] = o.Clicks
	}
	if o.BitlinkId != nil {
		toSerialize["bitlink_id"] = o.BitlinkId
	}
	return json.Marshal(toSerialize)
}

type NullableClicksCount struct {
	value *ClicksCount
	isSet bool
}

func (v NullableClicksCount) Get() *ClicksCount {
	return v.value
}

func (v *NullableClicksCount) Set(val *ClicksCount) {
	v.value = val
	v.isSet = true
}

func (v NullableClicksCount) IsSet() bool {
	return v.isSet
}

func (v *NullableClicksCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClicksCount(val *ClicksCount) *NullableClicksCount {
	return &NullableClicksCount{value: val, isSet: true}
}

func (v NullableClicksCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClicksCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
