/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPasswordChange struct for UserPasswordChange
type UserPasswordChange struct {
	OriginalPassword string `json:"original_password"`
	NewPassword      string `json:"new_password"`
}

// NewUserPasswordChange instantiates a new UserPasswordChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordChange(originalPassword string, newPassword string) *UserPasswordChange {
	this := UserPasswordChange{}
	this.OriginalPassword = originalPassword
	this.NewPassword = newPassword
	return &this
}

// NewUserPasswordChangeWithDefaults instantiates a new UserPasswordChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordChangeWithDefaults() *UserPasswordChange {
	this := UserPasswordChange{}
	return &this
}

// GetOriginalPassword returns the OriginalPassword field value
func (o *UserPasswordChange) GetOriginalPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalPassword
}

// GetOriginalPasswordOk returns a tuple with the OriginalPassword field value
// and a boolean to check if the value has been set.
func (o *UserPasswordChange) GetOriginalPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPassword, true
}

// SetOriginalPassword sets field value
func (o *UserPasswordChange) SetOriginalPassword(v string) {
	o.OriginalPassword = v
}

// GetNewPassword returns the NewPassword field value
func (o *UserPasswordChange) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *UserPasswordChange) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *UserPasswordChange) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o UserPasswordChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["original_password"] = o.OriginalPassword
	}
	if true {
		toSerialize["new_password"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullableUserPasswordChange struct {
	value *UserPasswordChange
	isSet bool
}

func (v NullableUserPasswordChange) Get() *UserPasswordChange {
	return v.value
}

func (v *NullableUserPasswordChange) Set(val *UserPasswordChange) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordChange) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordChange(val *UserPasswordChange) *NullableUserPasswordChange {
	return &NullableUserPasswordChange{value: val, isSet: true}
}

func (v NullableUserPasswordChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
