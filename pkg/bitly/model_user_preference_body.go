/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPreferenceBody struct for UserPreferenceBody
type UserPreferenceBody struct {
	IsActive   *bool   `json:"is_active,omitempty"`
	Preference *string `json:"preference,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// NewUserPreferenceBody instantiates a new UserPreferenceBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreferenceBody() *UserPreferenceBody {
	this := UserPreferenceBody{}
	return &this
}

// NewUserPreferenceBodyWithDefaults instantiates a new UserPreferenceBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferenceBodyWithDefaults() *UserPreferenceBody {
	this := UserPreferenceBody{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *UserPreferenceBody) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreferenceBody) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UserPreferenceBody) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *UserPreferenceBody) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *UserPreferenceBody) GetPreference() string {
	if o == nil || o.Preference == nil {
		var ret string
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreferenceBody) GetPreferenceOk() (*string, bool) {
	if o == nil || o.Preference == nil {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *UserPreferenceBody) HasPreference() bool {
	if o != nil && o.Preference != nil {
		return true
	}

	return false
}

// SetPreference gets a reference to the given string and assigns it to the Preference field.
func (o *UserPreferenceBody) SetPreference(v string) {
	o.Preference = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UserPreferenceBody) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreferenceBody) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UserPreferenceBody) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UserPreferenceBody) SetValue(v string) {
	o.Value = &v
}

func (o UserPreferenceBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Preference != nil {
		toSerialize["preference"] = o.Preference
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableUserPreferenceBody struct {
	value *UserPreferenceBody
	isSet bool
}

func (v NullableUserPreferenceBody) Get() *UserPreferenceBody {
	return v.value
}

func (v *NullableUserPreferenceBody) Set(val *UserPreferenceBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreferenceBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreferenceBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreferenceBody(val *UserPreferenceBody) *NullableUserPreferenceBody {
	return &NullableUserPreferenceBody{value: val, isSet: true}
}

func (v NullableUserPreferenceBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreferenceBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
