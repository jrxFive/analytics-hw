/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FormPage struct for FormPage
type FormPage struct {
	Fields *[]FormField `json:"fields,omitempty"`
}

// NewFormPage instantiates a new FormPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormPage() *FormPage {
	this := FormPage{}
	return &this
}

// NewFormPageWithDefaults instantiates a new FormPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormPageWithDefaults() *FormPage {
	this := FormPage{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *FormPage) GetFields() []FormField {
	if o == nil || o.Fields == nil {
		var ret []FormField
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormPage) GetFieldsOk() (*[]FormField, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *FormPage) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []FormField and assigns it to the Fields field.
func (o *FormPage) SetFields(v []FormField) {
	o.Fields = &v
}

func (o FormPage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableFormPage struct {
	value *FormPage
	isSet bool
}

func (v NullableFormPage) Get() *FormPage {
	return v.value
}

func (v *NullableFormPage) Set(val *FormPage) {
	v.value = val
	v.isSet = true
}

func (v NullableFormPage) IsSet() bool {
	return v.isSet
}

func (v *NullableFormPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormPage(val *FormPage) *NullableFormPage {
	return &NullableFormPage{value: val, isSet: true}
}

func (v NullableFormPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
