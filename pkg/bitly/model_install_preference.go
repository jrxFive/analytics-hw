/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InstallPreference the model 'InstallPreference'
type InstallPreference string

// List of InstallPreference
const (
	NO_INSTALL      InstallPreference = "no_install"
	AUTO_INSTALL    InstallPreference = "auto_install"
	PROMOTE_INSTALL InstallPreference = "promote_install"
)

var allowedInstallPreferenceEnumValues = []InstallPreference{
	"no_install",
	"auto_install",
	"promote_install",
}

func (v *InstallPreference) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstallPreference(value)
	for _, existing := range allowedInstallPreferenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstallPreference", value)
}

// NewInstallPreferenceFromValue returns a pointer to a valid InstallPreference
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstallPreferenceFromValue(v string) (*InstallPreference, error) {
	ev := InstallPreference(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstallPreference: valid values are %v", v, allowedInstallPreferenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstallPreference) IsValid() bool {
	for _, existing := range allowedInstallPreferenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstallPreference value
func (v InstallPreference) Ptr() *InstallPreference {
	return &v
}

type NullableInstallPreference struct {
	value *InstallPreference
	isSet bool
}

func (v NullableInstallPreference) Get() *InstallPreference {
	return v.value
}

func (v *NullableInstallPreference) Set(val *InstallPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallPreference(val *InstallPreference) *NullableInstallPreference {
	return &NullableInstallPreference{value: val, isSet: true}
}

func (v NullableInstallPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
