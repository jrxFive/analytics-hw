/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Clickstream struct for Clickstream
type Clickstream struct {
	// Descriptive name for the clickstream
	Name *string `json:"name,omitempty"`
	// Clickstream creation time
	Created *time.Time `json:"created,omitempty"`
	// Time of deactivation, if any
	Deactivated *time.Time `json:"deactivated,omitempty"`
	// Last modified time
	Modified *time.Time `json:"modified,omitempty"`
	// Clickstream query
	Query *string `json:"query,omitempty"`
	// Unique short id
	Id *string `json:"id,omitempty"`
}

// NewClickstream instantiates a new Clickstream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickstream() *Clickstream {
	this := Clickstream{}
	return &this
}

// NewClickstreamWithDefaults instantiates a new Clickstream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickstreamWithDefaults() *Clickstream {
	this := Clickstream{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Clickstream) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clickstream) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Clickstream) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Clickstream) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Clickstream) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clickstream) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Clickstream) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Clickstream) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *Clickstream) GetDeactivated() time.Time {
	if o == nil || o.Deactivated == nil {
		var ret time.Time
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clickstream) GetDeactivatedOk() (*time.Time, bool) {
	if o == nil || o.Deactivated == nil {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *Clickstream) HasDeactivated() bool {
	if o != nil && o.Deactivated != nil {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given time.Time and assigns it to the Deactivated field.
func (o *Clickstream) SetDeactivated(v time.Time) {
	o.Deactivated = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Clickstream) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clickstream) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Clickstream) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Clickstream) SetModified(v time.Time) {
	o.Modified = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Clickstream) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clickstream) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Clickstream) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Clickstream) SetQuery(v string) {
	o.Query = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Clickstream) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clickstream) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Clickstream) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Clickstream) SetId(v string) {
	o.Id = &v
}

func (o Clickstream) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Deactivated != nil {
		toSerialize["deactivated"] = o.Deactivated
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableClickstream struct {
	value *Clickstream
	isSet bool
}

func (v NullableClickstream) Get() *Clickstream {
	return v.value
}

func (v *NullableClickstream) Set(val *Clickstream) {
	v.value = val
	v.isSet = true
}

func (v NullableClickstream) IsSet() bool {
	return v.isSet
}

func (v *NullableClickstream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickstream(val *Clickstream) *NullableClickstream {
	return &NullableClickstream{value: val, isSet: true}
}

func (v NullableClickstream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickstream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
