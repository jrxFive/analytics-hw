/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ShareAccount struct for ShareAccount
type ShareAccount struct {
	NumericId    *int32          `json:"numeric_id,omitempty"`
	AccountLogin *string         `json:"account_login,omitempty"`
	AccountType  *SocialAccounts `json:"account_type,omitempty"`
	AccountId    *string         `json:"account_id,omitempty"`
	OauthError   *string         `json:"oauth_error,omitempty"`
	Primary      *bool           `json:"primary,omitempty"`
	Visible      *bool           `json:"visible,omitempty"`
	// ISO timestamp
	Connected   *string `json:"connected,omitempty"`
	AccountName *string `json:"account_name,omitempty"`
}

// NewShareAccount instantiates a new ShareAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareAccount() *ShareAccount {
	this := ShareAccount{}
	return &this
}

// NewShareAccountWithDefaults instantiates a new ShareAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareAccountWithDefaults() *ShareAccount {
	this := ShareAccount{}
	return &this
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *ShareAccount) GetNumericId() int32 {
	if o == nil || o.NumericId == nil {
		var ret int32
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetNumericIdOk() (*int32, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *ShareAccount) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int32 and assigns it to the NumericId field.
func (o *ShareAccount) SetNumericId(v int32) {
	o.NumericId = &v
}

// GetAccountLogin returns the AccountLogin field value if set, zero value otherwise.
func (o *ShareAccount) GetAccountLogin() string {
	if o == nil || o.AccountLogin == nil {
		var ret string
		return ret
	}
	return *o.AccountLogin
}

// GetAccountLoginOk returns a tuple with the AccountLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetAccountLoginOk() (*string, bool) {
	if o == nil || o.AccountLogin == nil {
		return nil, false
	}
	return o.AccountLogin, true
}

// HasAccountLogin returns a boolean if a field has been set.
func (o *ShareAccount) HasAccountLogin() bool {
	if o != nil && o.AccountLogin != nil {
		return true
	}

	return false
}

// SetAccountLogin gets a reference to the given string and assigns it to the AccountLogin field.
func (o *ShareAccount) SetAccountLogin(v string) {
	o.AccountLogin = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *ShareAccount) GetAccountType() SocialAccounts {
	if o == nil || o.AccountType == nil {
		var ret SocialAccounts
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetAccountTypeOk() (*SocialAccounts, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *ShareAccount) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given SocialAccounts and assigns it to the AccountType field.
func (o *ShareAccount) SetAccountType(v SocialAccounts) {
	o.AccountType = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ShareAccount) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ShareAccount) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *ShareAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetOauthError returns the OauthError field value if set, zero value otherwise.
func (o *ShareAccount) GetOauthError() string {
	if o == nil || o.OauthError == nil {
		var ret string
		return ret
	}
	return *o.OauthError
}

// GetOauthErrorOk returns a tuple with the OauthError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetOauthErrorOk() (*string, bool) {
	if o == nil || o.OauthError == nil {
		return nil, false
	}
	return o.OauthError, true
}

// HasOauthError returns a boolean if a field has been set.
func (o *ShareAccount) HasOauthError() bool {
	if o != nil && o.OauthError != nil {
		return true
	}

	return false
}

// SetOauthError gets a reference to the given string and assigns it to the OauthError field.
func (o *ShareAccount) SetOauthError(v string) {
	o.OauthError = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *ShareAccount) GetPrimary() bool {
	if o == nil || o.Primary == nil {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetPrimaryOk() (*bool, bool) {
	if o == nil || o.Primary == nil {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *ShareAccount) HasPrimary() bool {
	if o != nil && o.Primary != nil {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *ShareAccount) SetPrimary(v bool) {
	o.Primary = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *ShareAccount) GetVisible() bool {
	if o == nil || o.Visible == nil {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetVisibleOk() (*bool, bool) {
	if o == nil || o.Visible == nil {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *ShareAccount) HasVisible() bool {
	if o != nil && o.Visible != nil {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *ShareAccount) SetVisible(v bool) {
	o.Visible = &v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *ShareAccount) GetConnected() string {
	if o == nil || o.Connected == nil {
		var ret string
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetConnectedOk() (*string, bool) {
	if o == nil || o.Connected == nil {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *ShareAccount) HasConnected() bool {
	if o != nil && o.Connected != nil {
		return true
	}

	return false
}

// SetConnected gets a reference to the given string and assigns it to the Connected field.
func (o *ShareAccount) SetConnected(v string) {
	o.Connected = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *ShareAccount) GetAccountName() string {
	if o == nil || o.AccountName == nil {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareAccount) GetAccountNameOk() (*string, bool) {
	if o == nil || o.AccountName == nil {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *ShareAccount) HasAccountName() bool {
	if o != nil && o.AccountName != nil {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *ShareAccount) SetAccountName(v string) {
	o.AccountName = &v
}

func (o ShareAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumericId != nil {
		toSerialize["numeric_id"] = o.NumericId
	}
	if o.AccountLogin != nil {
		toSerialize["account_login"] = o.AccountLogin
	}
	if o.AccountType != nil {
		toSerialize["account_type"] = o.AccountType
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.OauthError != nil {
		toSerialize["oauth_error"] = o.OauthError
	}
	if o.Primary != nil {
		toSerialize["primary"] = o.Primary
	}
	if o.Visible != nil {
		toSerialize["visible"] = o.Visible
	}
	if o.Connected != nil {
		toSerialize["connected"] = o.Connected
	}
	if o.AccountName != nil {
		toSerialize["account_name"] = o.AccountName
	}
	return json.Marshal(toSerialize)
}

type NullableShareAccount struct {
	value *ShareAccount
	isSet bool
}

func (v NullableShareAccount) Get() *ShareAccount {
	return v.value
}

func (v *NullableShareAccount) Set(val *ShareAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableShareAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableShareAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareAccount(val *ShareAccount) *NullableShareAccount {
	return &NullableShareAccount{value: val, isSet: true}
}

func (v NullableShareAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
