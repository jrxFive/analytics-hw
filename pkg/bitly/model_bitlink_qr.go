/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BitlinkQR struct for BitlinkQR
type BitlinkQR struct {
	// Data URI of QR Code image
	QrCode *string `json:"qr_code,omitempty"`
	Link   *string `json:"link,omitempty"`
	Id     *string `json:"id,omitempty"`
}

// NewBitlinkQR instantiates a new BitlinkQR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBitlinkQR() *BitlinkQR {
	this := BitlinkQR{}
	return &this
}

// NewBitlinkQRWithDefaults instantiates a new BitlinkQR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBitlinkQRWithDefaults() *BitlinkQR {
	this := BitlinkQR{}
	return &this
}

// GetQrCode returns the QrCode field value if set, zero value otherwise.
func (o *BitlinkQR) GetQrCode() string {
	if o == nil || o.QrCode == nil {
		var ret string
		return ret
	}
	return *o.QrCode
}

// GetQrCodeOk returns a tuple with the QrCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BitlinkQR) GetQrCodeOk() (*string, bool) {
	if o == nil || o.QrCode == nil {
		return nil, false
	}
	return o.QrCode, true
}

// HasQrCode returns a boolean if a field has been set.
func (o *BitlinkQR) HasQrCode() bool {
	if o != nil && o.QrCode != nil {
		return true
	}

	return false
}

// SetQrCode gets a reference to the given string and assigns it to the QrCode field.
func (o *BitlinkQR) SetQrCode(v string) {
	o.QrCode = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *BitlinkQR) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BitlinkQR) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *BitlinkQR) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *BitlinkQR) SetLink(v string) {
	o.Link = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BitlinkQR) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BitlinkQR) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BitlinkQR) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BitlinkQR) SetId(v string) {
	o.Id = &v
}

func (o BitlinkQR) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QrCode != nil {
		toSerialize["qr_code"] = o.QrCode
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableBitlinkQR struct {
	value *BitlinkQR
	isSet bool
}

func (v NullableBitlinkQR) Get() *BitlinkQR {
	return v.value
}

func (v *NullableBitlinkQR) Set(val *BitlinkQR) {
	v.value = val
	v.isSet = true
}

func (v NullableBitlinkQR) IsSet() bool {
	return v.isSet
}

func (v *NullableBitlinkQR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBitlinkQR(val *BitlinkQR) *NullableBitlinkQR {
	return &NullableBitlinkQR{value: val, isSet: true}
}

func (v NullableBitlinkQR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBitlinkQR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
