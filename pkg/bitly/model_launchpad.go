/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Launchpad struct for Launchpad
type Launchpad struct {
	LaunchpadId         *string              `json:"launchpad_id,omitempty"`
	Domain              *string              `json:"domain,omitempty"`
	Keyword             *string              `json:"keyword,omitempty"`
	IsActive            bool                 `json:"is_active"`
	Buttons             *[]LaunchpadButton   `json:"buttons,omitempty"`
	LaunchpadAppearance *LaunchpadAppearance `json:"launchpad_appearance,omitempty"`
	Scheme              *string              `json:"scheme,omitempty"`
}

// NewLaunchpad instantiates a new Launchpad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchpad(isActive bool) *Launchpad {
	this := Launchpad{}
	this.IsActive = isActive
	return &this
}

// NewLaunchpadWithDefaults instantiates a new Launchpad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchpadWithDefaults() *Launchpad {
	this := Launchpad{}
	return &this
}

// GetLaunchpadId returns the LaunchpadId field value if set, zero value otherwise.
func (o *Launchpad) GetLaunchpadId() string {
	if o == nil || o.LaunchpadId == nil {
		var ret string
		return ret
	}
	return *o.LaunchpadId
}

// GetLaunchpadIdOk returns a tuple with the LaunchpadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpad) GetLaunchpadIdOk() (*string, bool) {
	if o == nil || o.LaunchpadId == nil {
		return nil, false
	}
	return o.LaunchpadId, true
}

// HasLaunchpadId returns a boolean if a field has been set.
func (o *Launchpad) HasLaunchpadId() bool {
	if o != nil && o.LaunchpadId != nil {
		return true
	}

	return false
}

// SetLaunchpadId gets a reference to the given string and assigns it to the LaunchpadId field.
func (o *Launchpad) SetLaunchpadId(v string) {
	o.LaunchpadId = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Launchpad) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpad) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Launchpad) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Launchpad) SetDomain(v string) {
	o.Domain = &v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *Launchpad) GetKeyword() string {
	if o == nil || o.Keyword == nil {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpad) GetKeywordOk() (*string, bool) {
	if o == nil || o.Keyword == nil {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *Launchpad) HasKeyword() bool {
	if o != nil && o.Keyword != nil {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *Launchpad) SetKeyword(v string) {
	o.Keyword = &v
}

// GetIsActive returns the IsActive field value
func (o *Launchpad) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *Launchpad) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *Launchpad) SetIsActive(v bool) {
	o.IsActive = v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *Launchpad) GetButtons() []LaunchpadButton {
	if o == nil || o.Buttons == nil {
		var ret []LaunchpadButton
		return ret
	}
	return *o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpad) GetButtonsOk() (*[]LaunchpadButton, bool) {
	if o == nil || o.Buttons == nil {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *Launchpad) HasButtons() bool {
	if o != nil && o.Buttons != nil {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []LaunchpadButton and assigns it to the Buttons field.
func (o *Launchpad) SetButtons(v []LaunchpadButton) {
	o.Buttons = &v
}

// GetLaunchpadAppearance returns the LaunchpadAppearance field value if set, zero value otherwise.
func (o *Launchpad) GetLaunchpadAppearance() LaunchpadAppearance {
	if o == nil || o.LaunchpadAppearance == nil {
		var ret LaunchpadAppearance
		return ret
	}
	return *o.LaunchpadAppearance
}

// GetLaunchpadAppearanceOk returns a tuple with the LaunchpadAppearance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpad) GetLaunchpadAppearanceOk() (*LaunchpadAppearance, bool) {
	if o == nil || o.LaunchpadAppearance == nil {
		return nil, false
	}
	return o.LaunchpadAppearance, true
}

// HasLaunchpadAppearance returns a boolean if a field has been set.
func (o *Launchpad) HasLaunchpadAppearance() bool {
	if o != nil && o.LaunchpadAppearance != nil {
		return true
	}

	return false
}

// SetLaunchpadAppearance gets a reference to the given LaunchpadAppearance and assigns it to the LaunchpadAppearance field.
func (o *Launchpad) SetLaunchpadAppearance(v LaunchpadAppearance) {
	o.LaunchpadAppearance = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *Launchpad) GetScheme() string {
	if o == nil || o.Scheme == nil {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpad) GetSchemeOk() (*string, bool) {
	if o == nil || o.Scheme == nil {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *Launchpad) HasScheme() bool {
	if o != nil && o.Scheme != nil {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *Launchpad) SetScheme(v string) {
	o.Scheme = &v
}

func (o Launchpad) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LaunchpadId != nil {
		toSerialize["launchpad_id"] = o.LaunchpadId
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Keyword != nil {
		toSerialize["keyword"] = o.Keyword
	}
	if true {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	if o.LaunchpadAppearance != nil {
		toSerialize["launchpad_appearance"] = o.LaunchpadAppearance
	}
	if o.Scheme != nil {
		toSerialize["scheme"] = o.Scheme
	}
	return json.Marshal(toSerialize)
}

type NullableLaunchpad struct {
	value *Launchpad
	isSet bool
}

func (v NullableLaunchpad) Get() *Launchpad {
	return v.value
}

func (v *NullableLaunchpad) Set(val *Launchpad) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchpad) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchpad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchpad(val *Launchpad) *NullableLaunchpad {
	return &NullableLaunchpad{value: val, isSet: true}
}

func (v NullableLaunchpad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchpad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
