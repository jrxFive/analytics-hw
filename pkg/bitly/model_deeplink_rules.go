/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeeplinkRules struct for DeeplinkRules
type DeeplinkRules struct {
	Rules *[]DeeplinkRule `json:"rules,omitempty"`
}

// NewDeeplinkRules instantiates a new DeeplinkRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeeplinkRules() *DeeplinkRules {
	this := DeeplinkRules{}
	return &this
}

// NewDeeplinkRulesWithDefaults instantiates a new DeeplinkRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeeplinkRulesWithDefaults() *DeeplinkRules {
	this := DeeplinkRules{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *DeeplinkRules) GetRules() []DeeplinkRule {
	if o == nil || o.Rules == nil {
		var ret []DeeplinkRule
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkRules) GetRulesOk() (*[]DeeplinkRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *DeeplinkRules) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []DeeplinkRule and assigns it to the Rules field.
func (o *DeeplinkRules) SetRules(v []DeeplinkRule) {
	o.Rules = &v
}

func (o DeeplinkRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableDeeplinkRules struct {
	value *DeeplinkRules
	isSet bool
}

func (v NullableDeeplinkRules) Get() *DeeplinkRules {
	return v.value
}

func (v *NullableDeeplinkRules) Set(val *DeeplinkRules) {
	v.value = val
	v.isSet = true
}

func (v NullableDeeplinkRules) IsSet() bool {
	return v.isSet
}

func (v *NullableDeeplinkRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeeplinkRules(val *DeeplinkRules) *NullableDeeplinkRules {
	return &NullableDeeplinkRules{value: val, isSet: true}
}

func (v NullableDeeplinkRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeeplinkRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
