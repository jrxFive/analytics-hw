/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FormSelectOptions struct for FormSelectOptions
type FormSelectOptions struct {
	Display *string `json:"display,omitempty"`
	Key     *string `json:"key,omitempty"`
}

// NewFormSelectOptions instantiates a new FormSelectOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormSelectOptions() *FormSelectOptions {
	this := FormSelectOptions{}
	return &this
}

// NewFormSelectOptionsWithDefaults instantiates a new FormSelectOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormSelectOptionsWithDefaults() *FormSelectOptions {
	this := FormSelectOptions{}
	return &this
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *FormSelectOptions) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSelectOptions) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *FormSelectOptions) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *FormSelectOptions) SetDisplay(v string) {
	o.Display = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *FormSelectOptions) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSelectOptions) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *FormSelectOptions) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *FormSelectOptions) SetKey(v string) {
	o.Key = &v
}

func (o FormSelectOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableFormSelectOptions struct {
	value *FormSelectOptions
	isSet bool
}

func (v NullableFormSelectOptions) Get() *FormSelectOptions {
	return v.value
}

func (v *NullableFormSelectOptions) Set(val *FormSelectOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFormSelectOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFormSelectOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormSelectOptions(val *FormSelectOptions) *NullableFormSelectOptions {
	return &NullableFormSelectOptions{value: val, isSet: true}
}

func (v NullableFormSelectOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormSelectOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
