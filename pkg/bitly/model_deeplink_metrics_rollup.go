/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeeplinkMetricsRollup struct for DeeplinkMetricsRollup
type DeeplinkMetricsRollup struct {
	// data returned up to this reference timestamp
	UnitReference *string         `json:"unit_reference,omitempty"`
	Ios           *DeeplinkMetric `json:"ios,omitempty"`
	Other         *DeeplinkMetric `json:"other,omitempty"`
	// the number of units queried for
	Units   *int32          `json:"units,omitempty"`
	Android *DeeplinkMetric `json:"android,omitempty"`
	Unit    *TimeUnit       `json:"unit,omitempty"`
}

// NewDeeplinkMetricsRollup instantiates a new DeeplinkMetricsRollup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeeplinkMetricsRollup() *DeeplinkMetricsRollup {
	this := DeeplinkMetricsRollup{}
	var units int32 = -1
	this.Units = &units
	var unit TimeUnit = DAY
	this.Unit = &unit
	return &this
}

// NewDeeplinkMetricsRollupWithDefaults instantiates a new DeeplinkMetricsRollup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeeplinkMetricsRollupWithDefaults() *DeeplinkMetricsRollup {
	this := DeeplinkMetricsRollup{}
	var units int32 = -1
	this.Units = &units
	var unit TimeUnit = DAY
	this.Unit = &unit
	return &this
}

// GetUnitReference returns the UnitReference field value if set, zero value otherwise.
func (o *DeeplinkMetricsRollup) GetUnitReference() string {
	if o == nil || o.UnitReference == nil {
		var ret string
		return ret
	}
	return *o.UnitReference
}

// GetUnitReferenceOk returns a tuple with the UnitReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkMetricsRollup) GetUnitReferenceOk() (*string, bool) {
	if o == nil || o.UnitReference == nil {
		return nil, false
	}
	return o.UnitReference, true
}

// HasUnitReference returns a boolean if a field has been set.
func (o *DeeplinkMetricsRollup) HasUnitReference() bool {
	if o != nil && o.UnitReference != nil {
		return true
	}

	return false
}

// SetUnitReference gets a reference to the given string and assigns it to the UnitReference field.
func (o *DeeplinkMetricsRollup) SetUnitReference(v string) {
	o.UnitReference = &v
}

// GetIos returns the Ios field value if set, zero value otherwise.
func (o *DeeplinkMetricsRollup) GetIos() DeeplinkMetric {
	if o == nil || o.Ios == nil {
		var ret DeeplinkMetric
		return ret
	}
	return *o.Ios
}

// GetIosOk returns a tuple with the Ios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkMetricsRollup) GetIosOk() (*DeeplinkMetric, bool) {
	if o == nil || o.Ios == nil {
		return nil, false
	}
	return o.Ios, true
}

// HasIos returns a boolean if a field has been set.
func (o *DeeplinkMetricsRollup) HasIos() bool {
	if o != nil && o.Ios != nil {
		return true
	}

	return false
}

// SetIos gets a reference to the given DeeplinkMetric and assigns it to the Ios field.
func (o *DeeplinkMetricsRollup) SetIos(v DeeplinkMetric) {
	o.Ios = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *DeeplinkMetricsRollup) GetOther() DeeplinkMetric {
	if o == nil || o.Other == nil {
		var ret DeeplinkMetric
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkMetricsRollup) GetOtherOk() (*DeeplinkMetric, bool) {
	if o == nil || o.Other == nil {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *DeeplinkMetricsRollup) HasOther() bool {
	if o != nil && o.Other != nil {
		return true
	}

	return false
}

// SetOther gets a reference to the given DeeplinkMetric and assigns it to the Other field.
func (o *DeeplinkMetricsRollup) SetOther(v DeeplinkMetric) {
	o.Other = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *DeeplinkMetricsRollup) GetUnits() int32 {
	if o == nil || o.Units == nil {
		var ret int32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkMetricsRollup) GetUnitsOk() (*int32, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *DeeplinkMetricsRollup) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int32 and assigns it to the Units field.
func (o *DeeplinkMetricsRollup) SetUnits(v int32) {
	o.Units = &v
}

// GetAndroid returns the Android field value if set, zero value otherwise.
func (o *DeeplinkMetricsRollup) GetAndroid() DeeplinkMetric {
	if o == nil || o.Android == nil {
		var ret DeeplinkMetric
		return ret
	}
	return *o.Android
}

// GetAndroidOk returns a tuple with the Android field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkMetricsRollup) GetAndroidOk() (*DeeplinkMetric, bool) {
	if o == nil || o.Android == nil {
		return nil, false
	}
	return o.Android, true
}

// HasAndroid returns a boolean if a field has been set.
func (o *DeeplinkMetricsRollup) HasAndroid() bool {
	if o != nil && o.Android != nil {
		return true
	}

	return false
}

// SetAndroid gets a reference to the given DeeplinkMetric and assigns it to the Android field.
func (o *DeeplinkMetricsRollup) SetAndroid(v DeeplinkMetric) {
	o.Android = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DeeplinkMetricsRollup) GetUnit() TimeUnit {
	if o == nil || o.Unit == nil {
		var ret TimeUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeeplinkMetricsRollup) GetUnitOk() (*TimeUnit, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DeeplinkMetricsRollup) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given TimeUnit and assigns it to the Unit field.
func (o *DeeplinkMetricsRollup) SetUnit(v TimeUnit) {
	o.Unit = &v
}

func (o DeeplinkMetricsRollup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnitReference != nil {
		toSerialize["unit_reference"] = o.UnitReference
	}
	if o.Ios != nil {
		toSerialize["ios"] = o.Ios
	}
	if o.Other != nil {
		toSerialize["other"] = o.Other
	}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	if o.Android != nil {
		toSerialize["android"] = o.Android
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableDeeplinkMetricsRollup struct {
	value *DeeplinkMetricsRollup
	isSet bool
}

func (v NullableDeeplinkMetricsRollup) Get() *DeeplinkMetricsRollup {
	return v.value
}

func (v *NullableDeeplinkMetricsRollup) Set(val *DeeplinkMetricsRollup) {
	v.value = val
	v.isSet = true
}

func (v NullableDeeplinkMetricsRollup) IsSet() bool {
	return v.isSet
}

func (v *NullableDeeplinkMetricsRollup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeeplinkMetricsRollup(val *DeeplinkMetricsRollup) *NullableDeeplinkMetricsRollup {
	return &NullableDeeplinkMetricsRollup{value: val, isSet: true}
}

func (v NullableDeeplinkMetricsRollup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeeplinkMetricsRollup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
