/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CustomDomains struct for CustomDomains
type CustomDomains struct {
	UpgradeRequired *bool               `json:"upgrade_required,omitempty"`
	CustomDomains   *[]CustomDomainBody `json:"custom_domains,omitempty"`
}

// NewCustomDomains instantiates a new CustomDomains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDomains() *CustomDomains {
	this := CustomDomains{}
	return &this
}

// NewCustomDomainsWithDefaults instantiates a new CustomDomains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDomainsWithDefaults() *CustomDomains {
	this := CustomDomains{}
	return &this
}

// GetUpgradeRequired returns the UpgradeRequired field value if set, zero value otherwise.
func (o *CustomDomains) GetUpgradeRequired() bool {
	if o == nil || o.UpgradeRequired == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeRequired
}

// GetUpgradeRequiredOk returns a tuple with the UpgradeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDomains) GetUpgradeRequiredOk() (*bool, bool) {
	if o == nil || o.UpgradeRequired == nil {
		return nil, false
	}
	return o.UpgradeRequired, true
}

// HasUpgradeRequired returns a boolean if a field has been set.
func (o *CustomDomains) HasUpgradeRequired() bool {
	if o != nil && o.UpgradeRequired != nil {
		return true
	}

	return false
}

// SetUpgradeRequired gets a reference to the given bool and assigns it to the UpgradeRequired field.
func (o *CustomDomains) SetUpgradeRequired(v bool) {
	o.UpgradeRequired = &v
}

// GetCustomDomains returns the CustomDomains field value if set, zero value otherwise.
func (o *CustomDomains) GetCustomDomains() []CustomDomainBody {
	if o == nil || o.CustomDomains == nil {
		var ret []CustomDomainBody
		return ret
	}
	return *o.CustomDomains
}

// GetCustomDomainsOk returns a tuple with the CustomDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDomains) GetCustomDomainsOk() (*[]CustomDomainBody, bool) {
	if o == nil || o.CustomDomains == nil {
		return nil, false
	}
	return o.CustomDomains, true
}

// HasCustomDomains returns a boolean if a field has been set.
func (o *CustomDomains) HasCustomDomains() bool {
	if o != nil && o.CustomDomains != nil {
		return true
	}

	return false
}

// SetCustomDomains gets a reference to the given []CustomDomainBody and assigns it to the CustomDomains field.
func (o *CustomDomains) SetCustomDomains(v []CustomDomainBody) {
	o.CustomDomains = &v
}

func (o CustomDomains) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpgradeRequired != nil {
		toSerialize["upgrade_required"] = o.UpgradeRequired
	}
	if o.CustomDomains != nil {
		toSerialize["custom_domains"] = o.CustomDomains
	}
	return json.Marshal(toSerialize)
}

type NullableCustomDomains struct {
	value *CustomDomains
	isSet bool
}

func (v NullableCustomDomains) Get() *CustomDomains {
	return v.value
}

func (v *NullableCustomDomains) Set(val *CustomDomains) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDomains) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDomains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDomains(val *CustomDomains) *NullableCustomDomains {
	return &NullableCustomDomains{value: val, isSet: true}
}

func (v NullableCustomDomains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDomains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
