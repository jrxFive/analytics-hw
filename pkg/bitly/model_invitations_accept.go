/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvitationsAccept struct for InvitationsAccept
type InvitationsAccept struct {
	Tokens *[]string `json:"tokens,omitempty"`
}

// NewInvitationsAccept instantiates a new InvitationsAccept object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitationsAccept() *InvitationsAccept {
	this := InvitationsAccept{}
	return &this
}

// NewInvitationsAcceptWithDefaults instantiates a new InvitationsAccept object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationsAcceptWithDefaults() *InvitationsAccept {
	this := InvitationsAccept{}
	return &this
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *InvitationsAccept) GetTokens() []string {
	if o == nil || o.Tokens == nil {
		var ret []string
		return ret
	}
	return *o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationsAccept) GetTokensOk() (*[]string, bool) {
	if o == nil || o.Tokens == nil {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *InvitationsAccept) HasTokens() bool {
	if o != nil && o.Tokens != nil {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []string and assigns it to the Tokens field.
func (o *InvitationsAccept) SetTokens(v []string) {
	o.Tokens = &v
}

func (o InvitationsAccept) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tokens != nil {
		toSerialize["tokens"] = o.Tokens
	}
	return json.Marshal(toSerialize)
}

type NullableInvitationsAccept struct {
	value *InvitationsAccept
	isSet bool
}

func (v NullableInvitationsAccept) Get() *InvitationsAccept {
	return v.value
}

func (v *NullableInvitationsAccept) Set(val *InvitationsAccept) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationsAccept) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationsAccept) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationsAccept(val *InvitationsAccept) *NullableInvitationsAccept {
	return &NullableInvitationsAccept{value: val, isSet: true}
}

func (v NullableInvitationsAccept) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationsAccept) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
