/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClickMetric struct for ClickMetric
type ClickMetric struct {
	Clicks *int32  `json:"clicks,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// NewClickMetric instantiates a new ClickMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickMetric() *ClickMetric {
	this := ClickMetric{}
	return &this
}

// NewClickMetricWithDefaults instantiates a new ClickMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickMetricWithDefaults() *ClickMetric {
	this := ClickMetric{}
	return &this
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *ClickMetric) GetClicks() int32 {
	if o == nil || o.Clicks == nil {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickMetric) GetClicksOk() (*int32, bool) {
	if o == nil || o.Clicks == nil {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *ClickMetric) HasClicks() bool {
	if o != nil && o.Clicks != nil {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *ClickMetric) SetClicks(v int32) {
	o.Clicks = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ClickMetric) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickMetric) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ClickMetric) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ClickMetric) SetValue(v string) {
	o.Value = &v
}

func (o ClickMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Clicks != nil {
		toSerialize["clicks"] = o.Clicks
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableClickMetric struct {
	value *ClickMetric
	isSet bool
}

func (v NullableClickMetric) Get() *ClickMetric {
	return v.value
}

func (v *NullableClickMetric) Set(val *ClickMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableClickMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableClickMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickMetric(val *ClickMetric) *NullableClickMetric {
	return &NullableClickMetric{value: val, isSet: true}
}

func (v NullableClickMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
