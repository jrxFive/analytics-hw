/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FormConfig struct for FormConfig
type FormConfig struct {
	Options *[]FormSelectOptions `json:"options,omitempty"`
}

// NewFormConfig instantiates a new FormConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormConfig() *FormConfig {
	this := FormConfig{}
	return &this
}

// NewFormConfigWithDefaults instantiates a new FormConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormConfigWithDefaults() *FormConfig {
	this := FormConfig{}
	return &this
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *FormConfig) GetOptions() []FormSelectOptions {
	if o == nil || o.Options == nil {
		var ret []FormSelectOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormConfig) GetOptionsOk() (*[]FormSelectOptions, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *FormConfig) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []FormSelectOptions and assigns it to the Options field.
func (o *FormConfig) SetOptions(v []FormSelectOptions) {
	o.Options = &v
}

func (o FormConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableFormConfig struct {
	value *FormConfig
	isSet bool
}

func (v NullableFormConfig) Get() *FormConfig {
	return v.value
}

func (v *NullableFormConfig) Set(val *FormConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFormConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFormConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormConfig(val *FormConfig) *NullableFormConfig {
	return &NullableFormConfig{value: val, isSet: true}
}

func (v NullableFormConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
