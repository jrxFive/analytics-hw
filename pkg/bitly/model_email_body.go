/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmailBody struct for EmailBody
type EmailBody struct {
	Status    *string `json:"status,omitempty"`
	IsPrimary *bool   `json:"is_primary,omitempty"`
	Email     *string `json:"email,omitempty"`
}

// NewEmailBody instantiates a new EmailBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailBody() *EmailBody {
	this := EmailBody{}
	return &this
}

// NewEmailBodyWithDefaults instantiates a new EmailBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailBodyWithDefaults() *EmailBody {
	this := EmailBody{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmailBody) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailBody) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmailBody) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EmailBody) SetStatus(v string) {
	o.Status = &v
}

// GetIsPrimary returns the IsPrimary field value if set, zero value otherwise.
func (o *EmailBody) GetIsPrimary() bool {
	if o == nil || o.IsPrimary == nil {
		var ret bool
		return ret
	}
	return *o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailBody) GetIsPrimaryOk() (*bool, bool) {
	if o == nil || o.IsPrimary == nil {
		return nil, false
	}
	return o.IsPrimary, true
}

// HasIsPrimary returns a boolean if a field has been set.
func (o *EmailBody) HasIsPrimary() bool {
	if o != nil && o.IsPrimary != nil {
		return true
	}

	return false
}

// SetIsPrimary gets a reference to the given bool and assigns it to the IsPrimary field.
func (o *EmailBody) SetIsPrimary(v bool) {
	o.IsPrimary = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailBody) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailBody) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailBody) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmailBody) SetEmail(v string) {
	o.Email = &v
}

func (o EmailBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.IsPrimary != nil {
		toSerialize["is_primary"] = o.IsPrimary
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableEmailBody struct {
	value *EmailBody
	isSet bool
}

func (v NullableEmailBody) Get() *EmailBody {
	return v.value
}

func (v *NullableEmailBody) Set(val *EmailBody) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailBody) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailBody(val *EmailBody) *NullableEmailBody {
	return &NullableEmailBody{value: val, isSet: true}
}

func (v NullableEmailBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
