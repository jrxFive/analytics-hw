/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrgEmails an array of org emails
type OrgEmails struct {
	Emails *[]OrgEmail `json:"emails,omitempty"`
}

// NewOrgEmails instantiates a new OrgEmails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgEmails() *OrgEmails {
	this := OrgEmails{}
	return &this
}

// NewOrgEmailsWithDefaults instantiates a new OrgEmails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgEmailsWithDefaults() *OrgEmails {
	this := OrgEmails{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *OrgEmails) GetEmails() []OrgEmail {
	if o == nil || o.Emails == nil {
		var ret []OrgEmail
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgEmails) GetEmailsOk() (*[]OrgEmail, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *OrgEmails) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []OrgEmail and assigns it to the Emails field.
func (o *OrgEmails) SetEmails(v []OrgEmail) {
	o.Emails = &v
}

func (o OrgEmails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	return json.Marshal(toSerialize)
}

type NullableOrgEmails struct {
	value *OrgEmails
	isSet bool
}

func (v NullableOrgEmails) Get() *OrgEmails {
	return v.value
}

func (v *NullableOrgEmails) Set(val *OrgEmails) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgEmails) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgEmails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgEmails(val *OrgEmails) *NullableOrgEmails {
	return &NullableOrgEmails{value: val, isSet: true}
}

func (v NullableOrgEmails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgEmails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
