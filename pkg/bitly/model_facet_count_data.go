/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FacetCountData struct for FacetCountData
type FacetCountData struct {
	TotalCount *int32            `json:"total_count,omitempty"`
	Ts         *int32            `json:"ts,omitempty"`
	Items      *[]FacetCountItem `json:"items,omitempty"`
}

// NewFacetCountData instantiates a new FacetCountData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacetCountData() *FacetCountData {
	this := FacetCountData{}
	return &this
}

// NewFacetCountDataWithDefaults instantiates a new FacetCountData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetCountDataWithDefaults() *FacetCountData {
	this := FacetCountData{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *FacetCountData) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetCountData) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *FacetCountData) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *FacetCountData) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *FacetCountData) GetTs() int32 {
	if o == nil || o.Ts == nil {
		var ret int32
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetCountData) GetTsOk() (*int32, bool) {
	if o == nil || o.Ts == nil {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *FacetCountData) HasTs() bool {
	if o != nil && o.Ts != nil {
		return true
	}

	return false
}

// SetTs gets a reference to the given int32 and assigns it to the Ts field.
func (o *FacetCountData) SetTs(v int32) {
	o.Ts = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *FacetCountData) GetItems() []FacetCountItem {
	if o == nil || o.Items == nil {
		var ret []FacetCountItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetCountData) GetItemsOk() (*[]FacetCountItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *FacetCountData) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []FacetCountItem and assigns it to the Items field.
func (o *FacetCountData) SetItems(v []FacetCountItem) {
	o.Items = &v
}

func (o FacetCountData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}
	if o.Ts != nil {
		toSerialize["ts"] = o.Ts
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableFacetCountData struct {
	value *FacetCountData
	isSet bool
}

func (v NullableFacetCountData) Get() *FacetCountData {
	return v.value
}

func (v *NullableFacetCountData) Set(val *FacetCountData) {
	v.value = val
	v.isSet = true
}

func (v NullableFacetCountData) IsSet() bool {
	return v.isSet
}

func (v *NullableFacetCountData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacetCountData(val *FacetCountData) *NullableFacetCountData {
	return &NullableFacetCountData{value: val, isSet: true}
}

func (v NullableFacetCountData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacetCountData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
