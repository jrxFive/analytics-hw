/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainUpdate update custom domain fields
type DomainUpdate struct {
	HttpsEnabled            *bool   `json:"https_enabled,omitempty"`
	HstsEnabled             *bool   `json:"hsts_enabled,omitempty"`
	UpgradeInsecureRequests *bool   `json:"upgrade_insecure_requests,omitempty"`
	WildcardRedirect        *string `json:"wildcard_redirect,omitempty"`
	RootRedirect            *string `json:"root_redirect,omitempty"`
}

// NewDomainUpdate instantiates a new DomainUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainUpdate() *DomainUpdate {
	this := DomainUpdate{}
	return &this
}

// NewDomainUpdateWithDefaults instantiates a new DomainUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainUpdateWithDefaults() *DomainUpdate {
	this := DomainUpdate{}
	return &this
}

// GetHttpsEnabled returns the HttpsEnabled field value if set, zero value otherwise.
func (o *DomainUpdate) GetHttpsEnabled() bool {
	if o == nil || o.HttpsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HttpsEnabled
}

// GetHttpsEnabledOk returns a tuple with the HttpsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetHttpsEnabledOk() (*bool, bool) {
	if o == nil || o.HttpsEnabled == nil {
		return nil, false
	}
	return o.HttpsEnabled, true
}

// HasHttpsEnabled returns a boolean if a field has been set.
func (o *DomainUpdate) HasHttpsEnabled() bool {
	if o != nil && o.HttpsEnabled != nil {
		return true
	}

	return false
}

// SetHttpsEnabled gets a reference to the given bool and assigns it to the HttpsEnabled field.
func (o *DomainUpdate) SetHttpsEnabled(v bool) {
	o.HttpsEnabled = &v
}

// GetHstsEnabled returns the HstsEnabled field value if set, zero value otherwise.
func (o *DomainUpdate) GetHstsEnabled() bool {
	if o == nil || o.HstsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HstsEnabled
}

// GetHstsEnabledOk returns a tuple with the HstsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetHstsEnabledOk() (*bool, bool) {
	if o == nil || o.HstsEnabled == nil {
		return nil, false
	}
	return o.HstsEnabled, true
}

// HasHstsEnabled returns a boolean if a field has been set.
func (o *DomainUpdate) HasHstsEnabled() bool {
	if o != nil && o.HstsEnabled != nil {
		return true
	}

	return false
}

// SetHstsEnabled gets a reference to the given bool and assigns it to the HstsEnabled field.
func (o *DomainUpdate) SetHstsEnabled(v bool) {
	o.HstsEnabled = &v
}

// GetUpgradeInsecureRequests returns the UpgradeInsecureRequests field value if set, zero value otherwise.
func (o *DomainUpdate) GetUpgradeInsecureRequests() bool {
	if o == nil || o.UpgradeInsecureRequests == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeInsecureRequests
}

// GetUpgradeInsecureRequestsOk returns a tuple with the UpgradeInsecureRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetUpgradeInsecureRequestsOk() (*bool, bool) {
	if o == nil || o.UpgradeInsecureRequests == nil {
		return nil, false
	}
	return o.UpgradeInsecureRequests, true
}

// HasUpgradeInsecureRequests returns a boolean if a field has been set.
func (o *DomainUpdate) HasUpgradeInsecureRequests() bool {
	if o != nil && o.UpgradeInsecureRequests != nil {
		return true
	}

	return false
}

// SetUpgradeInsecureRequests gets a reference to the given bool and assigns it to the UpgradeInsecureRequests field.
func (o *DomainUpdate) SetUpgradeInsecureRequests(v bool) {
	o.UpgradeInsecureRequests = &v
}

// GetWildcardRedirect returns the WildcardRedirect field value if set, zero value otherwise.
func (o *DomainUpdate) GetWildcardRedirect() string {
	if o == nil || o.WildcardRedirect == nil {
		var ret string
		return ret
	}
	return *o.WildcardRedirect
}

// GetWildcardRedirectOk returns a tuple with the WildcardRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetWildcardRedirectOk() (*string, bool) {
	if o == nil || o.WildcardRedirect == nil {
		return nil, false
	}
	return o.WildcardRedirect, true
}

// HasWildcardRedirect returns a boolean if a field has been set.
func (o *DomainUpdate) HasWildcardRedirect() bool {
	if o != nil && o.WildcardRedirect != nil {
		return true
	}

	return false
}

// SetWildcardRedirect gets a reference to the given string and assigns it to the WildcardRedirect field.
func (o *DomainUpdate) SetWildcardRedirect(v string) {
	o.WildcardRedirect = &v
}

// GetRootRedirect returns the RootRedirect field value if set, zero value otherwise.
func (o *DomainUpdate) GetRootRedirect() string {
	if o == nil || o.RootRedirect == nil {
		var ret string
		return ret
	}
	return *o.RootRedirect
}

// GetRootRedirectOk returns a tuple with the RootRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetRootRedirectOk() (*string, bool) {
	if o == nil || o.RootRedirect == nil {
		return nil, false
	}
	return o.RootRedirect, true
}

// HasRootRedirect returns a boolean if a field has been set.
func (o *DomainUpdate) HasRootRedirect() bool {
	if o != nil && o.RootRedirect != nil {
		return true
	}

	return false
}

// SetRootRedirect gets a reference to the given string and assigns it to the RootRedirect field.
func (o *DomainUpdate) SetRootRedirect(v string) {
	o.RootRedirect = &v
}

func (o DomainUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpsEnabled != nil {
		toSerialize["https_enabled"] = o.HttpsEnabled
	}
	if o.HstsEnabled != nil {
		toSerialize["hsts_enabled"] = o.HstsEnabled
	}
	if o.UpgradeInsecureRequests != nil {
		toSerialize["upgrade_insecure_requests"] = o.UpgradeInsecureRequests
	}
	if o.WildcardRedirect != nil {
		toSerialize["wildcard_redirect"] = o.WildcardRedirect
	}
	if o.RootRedirect != nil {
		toSerialize["root_redirect"] = o.RootRedirect
	}
	return json.Marshal(toSerialize)
}

type NullableDomainUpdate struct {
	value *DomainUpdate
	isSet bool
}

func (v NullableDomainUpdate) Get() *DomainUpdate {
	return v.value
}

func (v *NullableDomainUpdate) Set(val *DomainUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUpdate(val *DomainUpdate) *NullableDomainUpdate {
	return &NullableDomainUpdate{value: val, isSet: true}
}

func (v NullableDomainUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
