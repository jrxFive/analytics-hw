/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CityMetric struct for CityMetric
type CityMetric struct {
	City      *string `json:"city,omitempty"`
	Region    *string `json:"region,omitempty"`
	Subregion *string `json:"subregion,omitempty"`
	Clicks    *int32  `json:"clicks,omitempty"`
	Country   *string `json:"country,omitempty"`
}

// NewCityMetric instantiates a new CityMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCityMetric() *CityMetric {
	this := CityMetric{}
	return &this
}

// NewCityMetricWithDefaults instantiates a new CityMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityMetricWithDefaults() *CityMetric {
	this := CityMetric{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CityMetric) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityMetric) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CityMetric) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CityMetric) SetCity(v string) {
	o.City = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CityMetric) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityMetric) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CityMetric) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CityMetric) SetRegion(v string) {
	o.Region = &v
}

// GetSubregion returns the Subregion field value if set, zero value otherwise.
func (o *CityMetric) GetSubregion() string {
	if o == nil || o.Subregion == nil {
		var ret string
		return ret
	}
	return *o.Subregion
}

// GetSubregionOk returns a tuple with the Subregion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityMetric) GetSubregionOk() (*string, bool) {
	if o == nil || o.Subregion == nil {
		return nil, false
	}
	return o.Subregion, true
}

// HasSubregion returns a boolean if a field has been set.
func (o *CityMetric) HasSubregion() bool {
	if o != nil && o.Subregion != nil {
		return true
	}

	return false
}

// SetSubregion gets a reference to the given string and assigns it to the Subregion field.
func (o *CityMetric) SetSubregion(v string) {
	o.Subregion = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *CityMetric) GetClicks() int32 {
	if o == nil || o.Clicks == nil {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityMetric) GetClicksOk() (*int32, bool) {
	if o == nil || o.Clicks == nil {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *CityMetric) HasClicks() bool {
	if o != nil && o.Clicks != nil {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *CityMetric) SetClicks(v int32) {
	o.Clicks = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CityMetric) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityMetric) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CityMetric) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CityMetric) SetCountry(v string) {
	o.Country = &v
}

func (o CityMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Subregion != nil {
		toSerialize["subregion"] = o.Subregion
	}
	if o.Clicks != nil {
		toSerialize["clicks"] = o.Clicks
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableCityMetric struct {
	value *CityMetric
	isSet bool
}

func (v NullableCityMetric) Get() *CityMetric {
	return v.value
}

func (v *NullableCityMetric) Set(val *CityMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableCityMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableCityMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCityMetric(val *CityMetric) *NullableCityMetric {
	return &NullableCityMetric{value: val, isSet: true}
}

func (v NullableCityMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCityMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
