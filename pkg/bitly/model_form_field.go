/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FormField struct for FormField
type FormField struct {
	FieldType *string     `json:"field_type,omitempty"`
	Name      *string     `json:"name,omitempty"`
	Required  *bool       `json:"required,omitempty"`
	Label     *string     `json:"label,omitempty"`
	Config    *FormConfig `json:"config,omitempty"`
	Response  *string     `json:"response,omitempty"`
}

// NewFormField instantiates a new FormField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormField() *FormField {
	this := FormField{}
	return &this
}

// NewFormFieldWithDefaults instantiates a new FormField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormFieldWithDefaults() *FormField {
	this := FormField{}
	return &this
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *FormField) GetFieldType() string {
	if o == nil || o.FieldType == nil {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetFieldTypeOk() (*string, bool) {
	if o == nil || o.FieldType == nil {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *FormField) HasFieldType() bool {
	if o != nil && o.FieldType != nil {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *FormField) SetFieldType(v string) {
	o.FieldType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormField) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormField) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormField) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FormField) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *FormField) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FormField) SetRequired(v bool) {
	o.Required = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormField) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormField) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FormField) SetLabel(v string) {
	o.Label = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *FormField) GetConfig() FormConfig {
	if o == nil || o.Config == nil {
		var ret FormConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetConfigOk() (*FormConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *FormField) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given FormConfig and assigns it to the Config field.
func (o *FormField) SetConfig(v FormConfig) {
	o.Config = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *FormField) GetResponse() string {
	if o == nil || o.Response == nil {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetResponseOk() (*string, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *FormField) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *FormField) SetResponse(v string) {
	o.Response = &v
}

func (o FormField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldType != nil {
		toSerialize["field_type"] = o.FieldType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	return json.Marshal(toSerialize)
}

type NullableFormField struct {
	value *FormField
	isSet bool
}

func (v NullableFormField) Get() *FormField {
	return v.value
}

func (v *NullableFormField) Set(val *FormField) {
	v.value = val
	v.isSet = true
}

func (v NullableFormField) IsSet() bool {
	return v.isSet
}

func (v *NullableFormField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormField(val *FormField) *NullableFormField {
	return &NullableFormField{value: val, isSet: true}
}

func (v NullableFormField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
