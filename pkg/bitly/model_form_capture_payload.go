/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FormCapturePayload struct for FormCapturePayload
type FormCapturePayload struct {
	SubmitText     *string     `json:"submit_text,omitempty"`
	Name           *string     `json:"name,omitempty"`
	ResponseStatus *string     `json:"response_status,omitempty"`
	Pages          *[]FormPage `json:"pages,omitempty"`
	Version        *string     `json:"version,omitempty"`
	GroupGuid      *string     `json:"group_guid,omitempty"`
	Login          *string     `json:"login,omitempty"`
	SkipText       *string     `json:"skip_text,omitempty"`
	OrgGuid        *string     `json:"org_guid,omitempty"`
}

// NewFormCapturePayload instantiates a new FormCapturePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormCapturePayload() *FormCapturePayload {
	this := FormCapturePayload{}
	return &this
}

// NewFormCapturePayloadWithDefaults instantiates a new FormCapturePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormCapturePayloadWithDefaults() *FormCapturePayload {
	this := FormCapturePayload{}
	return &this
}

// GetSubmitText returns the SubmitText field value if set, zero value otherwise.
func (o *FormCapturePayload) GetSubmitText() string {
	if o == nil || o.SubmitText == nil {
		var ret string
		return ret
	}
	return *o.SubmitText
}

// GetSubmitTextOk returns a tuple with the SubmitText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetSubmitTextOk() (*string, bool) {
	if o == nil || o.SubmitText == nil {
		return nil, false
	}
	return o.SubmitText, true
}

// HasSubmitText returns a boolean if a field has been set.
func (o *FormCapturePayload) HasSubmitText() bool {
	if o != nil && o.SubmitText != nil {
		return true
	}

	return false
}

// SetSubmitText gets a reference to the given string and assigns it to the SubmitText field.
func (o *FormCapturePayload) SetSubmitText(v string) {
	o.SubmitText = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormCapturePayload) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormCapturePayload) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormCapturePayload) SetName(v string) {
	o.Name = &v
}

// GetResponseStatus returns the ResponseStatus field value if set, zero value otherwise.
func (o *FormCapturePayload) GetResponseStatus() string {
	if o == nil || o.ResponseStatus == nil {
		var ret string
		return ret
	}
	return *o.ResponseStatus
}

// GetResponseStatusOk returns a tuple with the ResponseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetResponseStatusOk() (*string, bool) {
	if o == nil || o.ResponseStatus == nil {
		return nil, false
	}
	return o.ResponseStatus, true
}

// HasResponseStatus returns a boolean if a field has been set.
func (o *FormCapturePayload) HasResponseStatus() bool {
	if o != nil && o.ResponseStatus != nil {
		return true
	}

	return false
}

// SetResponseStatus gets a reference to the given string and assigns it to the ResponseStatus field.
func (o *FormCapturePayload) SetResponseStatus(v string) {
	o.ResponseStatus = &v
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *FormCapturePayload) GetPages() []FormPage {
	if o == nil || o.Pages == nil {
		var ret []FormPage
		return ret
	}
	return *o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetPagesOk() (*[]FormPage, bool) {
	if o == nil || o.Pages == nil {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *FormCapturePayload) HasPages() bool {
	if o != nil && o.Pages != nil {
		return true
	}

	return false
}

// SetPages gets a reference to the given []FormPage and assigns it to the Pages field.
func (o *FormCapturePayload) SetPages(v []FormPage) {
	o.Pages = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FormCapturePayload) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FormCapturePayload) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *FormCapturePayload) SetVersion(v string) {
	o.Version = &v
}

// GetGroupGuid returns the GroupGuid field value if set, zero value otherwise.
func (o *FormCapturePayload) GetGroupGuid() string {
	if o == nil || o.GroupGuid == nil {
		var ret string
		return ret
	}
	return *o.GroupGuid
}

// GetGroupGuidOk returns a tuple with the GroupGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetGroupGuidOk() (*string, bool) {
	if o == nil || o.GroupGuid == nil {
		return nil, false
	}
	return o.GroupGuid, true
}

// HasGroupGuid returns a boolean if a field has been set.
func (o *FormCapturePayload) HasGroupGuid() bool {
	if o != nil && o.GroupGuid != nil {
		return true
	}

	return false
}

// SetGroupGuid gets a reference to the given string and assigns it to the GroupGuid field.
func (o *FormCapturePayload) SetGroupGuid(v string) {
	o.GroupGuid = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *FormCapturePayload) GetLogin() string {
	if o == nil || o.Login == nil {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetLoginOk() (*string, bool) {
	if o == nil || o.Login == nil {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *FormCapturePayload) HasLogin() bool {
	if o != nil && o.Login != nil {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *FormCapturePayload) SetLogin(v string) {
	o.Login = &v
}

// GetSkipText returns the SkipText field value if set, zero value otherwise.
func (o *FormCapturePayload) GetSkipText() string {
	if o == nil || o.SkipText == nil {
		var ret string
		return ret
	}
	return *o.SkipText
}

// GetSkipTextOk returns a tuple with the SkipText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetSkipTextOk() (*string, bool) {
	if o == nil || o.SkipText == nil {
		return nil, false
	}
	return o.SkipText, true
}

// HasSkipText returns a boolean if a field has been set.
func (o *FormCapturePayload) HasSkipText() bool {
	if o != nil && o.SkipText != nil {
		return true
	}

	return false
}

// SetSkipText gets a reference to the given string and assigns it to the SkipText field.
func (o *FormCapturePayload) SetSkipText(v string) {
	o.SkipText = &v
}

// GetOrgGuid returns the OrgGuid field value if set, zero value otherwise.
func (o *FormCapturePayload) GetOrgGuid() string {
	if o == nil || o.OrgGuid == nil {
		var ret string
		return ret
	}
	return *o.OrgGuid
}

// GetOrgGuidOk returns a tuple with the OrgGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCapturePayload) GetOrgGuidOk() (*string, bool) {
	if o == nil || o.OrgGuid == nil {
		return nil, false
	}
	return o.OrgGuid, true
}

// HasOrgGuid returns a boolean if a field has been set.
func (o *FormCapturePayload) HasOrgGuid() bool {
	if o != nil && o.OrgGuid != nil {
		return true
	}

	return false
}

// SetOrgGuid gets a reference to the given string and assigns it to the OrgGuid field.
func (o *FormCapturePayload) SetOrgGuid(v string) {
	o.OrgGuid = &v
}

func (o FormCapturePayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubmitText != nil {
		toSerialize["submit_text"] = o.SubmitText
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ResponseStatus != nil {
		toSerialize["response_status"] = o.ResponseStatus
	}
	if o.Pages != nil {
		toSerialize["pages"] = o.Pages
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.GroupGuid != nil {
		toSerialize["group_guid"] = o.GroupGuid
	}
	if o.Login != nil {
		toSerialize["login"] = o.Login
	}
	if o.SkipText != nil {
		toSerialize["skip_text"] = o.SkipText
	}
	if o.OrgGuid != nil {
		toSerialize["org_guid"] = o.OrgGuid
	}
	return json.Marshal(toSerialize)
}

type NullableFormCapturePayload struct {
	value *FormCapturePayload
	isSet bool
}

func (v NullableFormCapturePayload) Get() *FormCapturePayload {
	return v.value
}

func (v *NullableFormCapturePayload) Set(val *FormCapturePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableFormCapturePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableFormCapturePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormCapturePayload(val *FormCapturePayload) *NullableFormCapturePayload {
	return &NullableFormCapturePayload{value: val, isSet: true}
}

func (v NullableFormCapturePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormCapturePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
