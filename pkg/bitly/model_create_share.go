/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateShare struct for CreateShare
type CreateShare struct {
	Text        *string         `json:"text,omitempty"`
	Bitlink     *string         `json:"bitlink,omitempty"`
	AccountType *SocialAccounts `json:"account_type,omitempty"`
	AccountId   *string         `json:"account_id,omitempty"`
	GroupGuid   *string         `json:"group_guid,omitempty"`
}

// NewCreateShare instantiates a new CreateShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateShare() *CreateShare {
	this := CreateShare{}
	return &this
}

// NewCreateShareWithDefaults instantiates a new CreateShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateShareWithDefaults() *CreateShare {
	this := CreateShare{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CreateShare) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShare) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CreateShare) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CreateShare) SetText(v string) {
	o.Text = &v
}

// GetBitlink returns the Bitlink field value if set, zero value otherwise.
func (o *CreateShare) GetBitlink() string {
	if o == nil || o.Bitlink == nil {
		var ret string
		return ret
	}
	return *o.Bitlink
}

// GetBitlinkOk returns a tuple with the Bitlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShare) GetBitlinkOk() (*string, bool) {
	if o == nil || o.Bitlink == nil {
		return nil, false
	}
	return o.Bitlink, true
}

// HasBitlink returns a boolean if a field has been set.
func (o *CreateShare) HasBitlink() bool {
	if o != nil && o.Bitlink != nil {
		return true
	}

	return false
}

// SetBitlink gets a reference to the given string and assigns it to the Bitlink field.
func (o *CreateShare) SetBitlink(v string) {
	o.Bitlink = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *CreateShare) GetAccountType() SocialAccounts {
	if o == nil || o.AccountType == nil {
		var ret SocialAccounts
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShare) GetAccountTypeOk() (*SocialAccounts, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *CreateShare) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given SocialAccounts and assigns it to the AccountType field.
func (o *CreateShare) SetAccountType(v SocialAccounts) {
	o.AccountType = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateShare) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShare) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateShare) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreateShare) SetAccountId(v string) {
	o.AccountId = &v
}

// GetGroupGuid returns the GroupGuid field value if set, zero value otherwise.
func (o *CreateShare) GetGroupGuid() string {
	if o == nil || o.GroupGuid == nil {
		var ret string
		return ret
	}
	return *o.GroupGuid
}

// GetGroupGuidOk returns a tuple with the GroupGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateShare) GetGroupGuidOk() (*string, bool) {
	if o == nil || o.GroupGuid == nil {
		return nil, false
	}
	return o.GroupGuid, true
}

// HasGroupGuid returns a boolean if a field has been set.
func (o *CreateShare) HasGroupGuid() bool {
	if o != nil && o.GroupGuid != nil {
		return true
	}

	return false
}

// SetGroupGuid gets a reference to the given string and assigns it to the GroupGuid field.
func (o *CreateShare) SetGroupGuid(v string) {
	o.GroupGuid = &v
}

func (o CreateShare) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.Bitlink != nil {
		toSerialize["bitlink"] = o.Bitlink
	}
	if o.AccountType != nil {
		toSerialize["account_type"] = o.AccountType
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.GroupGuid != nil {
		toSerialize["group_guid"] = o.GroupGuid
	}
	return json.Marshal(toSerialize)
}

type NullableCreateShare struct {
	value *CreateShare
	isSet bool
}

func (v NullableCreateShare) Get() *CreateShare {
	return v.value
}

func (v *NullableCreateShare) Set(val *CreateShare) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateShare) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateShare(val *CreateShare) *NullableCreateShare {
	return &NullableCreateShare{value: val, isSet: true}
}

func (v NullableCreateShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
