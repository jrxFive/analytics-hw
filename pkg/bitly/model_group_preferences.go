/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupPreferences struct for GroupPreferences
type GroupPreferences struct {
	GroupGuid        *string `json:"group_guid,omitempty"`
	DomainPreference *string `json:"domain_preference,omitempty"`
}

// NewGroupPreferences instantiates a new GroupPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPreferences() *GroupPreferences {
	this := GroupPreferences{}
	return &this
}

// NewGroupPreferencesWithDefaults instantiates a new GroupPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPreferencesWithDefaults() *GroupPreferences {
	this := GroupPreferences{}
	return &this
}

// GetGroupGuid returns the GroupGuid field value if set, zero value otherwise.
func (o *GroupPreferences) GetGroupGuid() string {
	if o == nil || o.GroupGuid == nil {
		var ret string
		return ret
	}
	return *o.GroupGuid
}

// GetGroupGuidOk returns a tuple with the GroupGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPreferences) GetGroupGuidOk() (*string, bool) {
	if o == nil || o.GroupGuid == nil {
		return nil, false
	}
	return o.GroupGuid, true
}

// HasGroupGuid returns a boolean if a field has been set.
func (o *GroupPreferences) HasGroupGuid() bool {
	if o != nil && o.GroupGuid != nil {
		return true
	}

	return false
}

// SetGroupGuid gets a reference to the given string and assigns it to the GroupGuid field.
func (o *GroupPreferences) SetGroupGuid(v string) {
	o.GroupGuid = &v
}

// GetDomainPreference returns the DomainPreference field value if set, zero value otherwise.
func (o *GroupPreferences) GetDomainPreference() string {
	if o == nil || o.DomainPreference == nil {
		var ret string
		return ret
	}
	return *o.DomainPreference
}

// GetDomainPreferenceOk returns a tuple with the DomainPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPreferences) GetDomainPreferenceOk() (*string, bool) {
	if o == nil || o.DomainPreference == nil {
		return nil, false
	}
	return o.DomainPreference, true
}

// HasDomainPreference returns a boolean if a field has been set.
func (o *GroupPreferences) HasDomainPreference() bool {
	if o != nil && o.DomainPreference != nil {
		return true
	}

	return false
}

// SetDomainPreference gets a reference to the given string and assigns it to the DomainPreference field.
func (o *GroupPreferences) SetDomainPreference(v string) {
	o.DomainPreference = &v
}

func (o GroupPreferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupGuid != nil {
		toSerialize["group_guid"] = o.GroupGuid
	}
	if o.DomainPreference != nil {
		toSerialize["domain_preference"] = o.DomainPreference
	}
	return json.Marshal(toSerialize)
}

type NullableGroupPreferences struct {
	value *GroupPreferences
	isSet bool
}

func (v NullableGroupPreferences) Get() *GroupPreferences {
	return v.value
}

func (v *NullableGroupPreferences) Set(val *GroupPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPreferences(val *GroupPreferences) *NullableGroupPreferences {
	return &NullableGroupPreferences{value: val, isSet: true}
}

func (v NullableGroupPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
