/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UMGroupPreferences struct for UMGroupPreferences
type UMGroupPreferences struct {
	Preferences *[]UMGroupPreference `json:"preferences,omitempty"`
}

// NewUMGroupPreferences instantiates a new UMGroupPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUMGroupPreferences() *UMGroupPreferences {
	this := UMGroupPreferences{}
	return &this
}

// NewUMGroupPreferencesWithDefaults instantiates a new UMGroupPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUMGroupPreferencesWithDefaults() *UMGroupPreferences {
	this := UMGroupPreferences{}
	return &this
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *UMGroupPreferences) GetPreferences() []UMGroupPreference {
	if o == nil || o.Preferences == nil {
		var ret []UMGroupPreference
		return ret
	}
	return *o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UMGroupPreferences) GetPreferencesOk() (*[]UMGroupPreference, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *UMGroupPreferences) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given []UMGroupPreference and assigns it to the Preferences field.
func (o *UMGroupPreferences) SetPreferences(v []UMGroupPreference) {
	o.Preferences = &v
}

func (o UMGroupPreferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableUMGroupPreferences struct {
	value *UMGroupPreferences
	isSet bool
}

func (v NullableUMGroupPreferences) Get() *UMGroupPreferences {
	return v.value
}

func (v *NullableUMGroupPreferences) Set(val *UMGroupPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableUMGroupPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableUMGroupPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUMGroupPreferences(val *UMGroupPreferences) *NullableUMGroupPreferences {
	return &NullableUMGroupPreferences{value: val, isSet: true}
}

func (v NullableUMGroupPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUMGroupPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
