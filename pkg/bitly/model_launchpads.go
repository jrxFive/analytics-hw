/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Launchpads struct for Launchpads
type Launchpads struct {
	Launchpads *[]Launchpad `json:"launchpads,omitempty"`
}

// NewLaunchpads instantiates a new Launchpads object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchpads() *Launchpads {
	this := Launchpads{}
	return &this
}

// NewLaunchpadsWithDefaults instantiates a new Launchpads object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchpadsWithDefaults() *Launchpads {
	this := Launchpads{}
	return &this
}

// GetLaunchpads returns the Launchpads field value if set, zero value otherwise.
func (o *Launchpads) GetLaunchpads() []Launchpad {
	if o == nil || o.Launchpads == nil {
		var ret []Launchpad
		return ret
	}
	return *o.Launchpads
}

// GetLaunchpadsOk returns a tuple with the Launchpads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launchpads) GetLaunchpadsOk() (*[]Launchpad, bool) {
	if o == nil || o.Launchpads == nil {
		return nil, false
	}
	return o.Launchpads, true
}

// HasLaunchpads returns a boolean if a field has been set.
func (o *Launchpads) HasLaunchpads() bool {
	if o != nil && o.Launchpads != nil {
		return true
	}

	return false
}

// SetLaunchpads gets a reference to the given []Launchpad and assigns it to the Launchpads field.
func (o *Launchpads) SetLaunchpads(v []Launchpad) {
	o.Launchpads = &v
}

func (o Launchpads) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Launchpads != nil {
		toSerialize["launchpads"] = o.Launchpads
	}
	return json.Marshal(toSerialize)
}

type NullableLaunchpads struct {
	value *Launchpads
	isSet bool
}

func (v NullableLaunchpads) Get() *Launchpads {
	return v.value
}

func (v *NullableLaunchpads) Set(val *Launchpads) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchpads) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchpads) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchpads(val *Launchpads) *NullableLaunchpads {
	return &NullableLaunchpads{value: val, isSet: true}
}

func (v NullableLaunchpads) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchpads) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
