/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConsumableFeature struct for ConsumableFeature
type ConsumableFeature struct {
	Name *string `json:"name,omitempty"`
	// ISO_TIMESTAMP
	Created *string `json:"created,omitempty"`
	// ISO_TIMESTAMP
	Modified      *string `json:"modified,omitempty"`
	Limit         *int32  `json:"limit,omitempty"`
	IsTierDefault *bool   `json:"is_tier_default,omitempty"`
	Id            *string `json:"id,omitempty"`
}

// NewConsumableFeature instantiates a new ConsumableFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumableFeature() *ConsumableFeature {
	this := ConsumableFeature{}
	return &this
}

// NewConsumableFeatureWithDefaults instantiates a new ConsumableFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumableFeatureWithDefaults() *ConsumableFeature {
	this := ConsumableFeature{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConsumableFeature) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumableFeature) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConsumableFeature) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConsumableFeature) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ConsumableFeature) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumableFeature) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ConsumableFeature) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ConsumableFeature) SetCreated(v string) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *ConsumableFeature) GetModified() string {
	if o == nil || o.Modified == nil {
		var ret string
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumableFeature) GetModifiedOk() (*string, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *ConsumableFeature) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given string and assigns it to the Modified field.
func (o *ConsumableFeature) SetModified(v string) {
	o.Modified = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ConsumableFeature) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumableFeature) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ConsumableFeature) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ConsumableFeature) SetLimit(v int32) {
	o.Limit = &v
}

// GetIsTierDefault returns the IsTierDefault field value if set, zero value otherwise.
func (o *ConsumableFeature) GetIsTierDefault() bool {
	if o == nil || o.IsTierDefault == nil {
		var ret bool
		return ret
	}
	return *o.IsTierDefault
}

// GetIsTierDefaultOk returns a tuple with the IsTierDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumableFeature) GetIsTierDefaultOk() (*bool, bool) {
	if o == nil || o.IsTierDefault == nil {
		return nil, false
	}
	return o.IsTierDefault, true
}

// HasIsTierDefault returns a boolean if a field has been set.
func (o *ConsumableFeature) HasIsTierDefault() bool {
	if o != nil && o.IsTierDefault != nil {
		return true
	}

	return false
}

// SetIsTierDefault gets a reference to the given bool and assigns it to the IsTierDefault field.
func (o *ConsumableFeature) SetIsTierDefault(v bool) {
	o.IsTierDefault = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConsumableFeature) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumableFeature) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConsumableFeature) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConsumableFeature) SetId(v string) {
	o.Id = &v
}

func (o ConsumableFeature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.IsTierDefault != nil {
		toSerialize["is_tier_default"] = o.IsTierDefault
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableConsumableFeature struct {
	value *ConsumableFeature
	isSet bool
}

func (v NullableConsumableFeature) Get() *ConsumableFeature {
	return v.value
}

func (v *NullableConsumableFeature) Set(val *ConsumableFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumableFeature(val *ConsumableFeature) *NullableConsumableFeature {
	return &NullableConsumableFeature{value: val, isSet: true}
}

func (v NullableConsumableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
