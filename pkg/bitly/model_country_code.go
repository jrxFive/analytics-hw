/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CountryCode struct for CountryCode
type CountryCode struct {
	CountryName *string `json:"CountryName,omitempty"`
	ISO3        *string `json:"ISO3,omitempty"`
	ISO2        *string `json:"ISO2,omitempty"`
	CallingCode *int32  `json:"CallingCode,omitempty"`
}

// NewCountryCode instantiates a new CountryCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryCode() *CountryCode {
	this := CountryCode{}
	return &this
}

// NewCountryCodeWithDefaults instantiates a new CountryCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryCodeWithDefaults() *CountryCode {
	this := CountryCode{}
	return &this
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *CountryCode) GetCountryName() string {
	if o == nil || o.CountryName == nil {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCode) GetCountryNameOk() (*string, bool) {
	if o == nil || o.CountryName == nil {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *CountryCode) HasCountryName() bool {
	if o != nil && o.CountryName != nil {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *CountryCode) SetCountryName(v string) {
	o.CountryName = &v
}

// GetISO3 returns the ISO3 field value if set, zero value otherwise.
func (o *CountryCode) GetISO3() string {
	if o == nil || o.ISO3 == nil {
		var ret string
		return ret
	}
	return *o.ISO3
}

// GetISO3Ok returns a tuple with the ISO3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCode) GetISO3Ok() (*string, bool) {
	if o == nil || o.ISO3 == nil {
		return nil, false
	}
	return o.ISO3, true
}

// HasISO3 returns a boolean if a field has been set.
func (o *CountryCode) HasISO3() bool {
	if o != nil && o.ISO3 != nil {
		return true
	}

	return false
}

// SetISO3 gets a reference to the given string and assigns it to the ISO3 field.
func (o *CountryCode) SetISO3(v string) {
	o.ISO3 = &v
}

// GetISO2 returns the ISO2 field value if set, zero value otherwise.
func (o *CountryCode) GetISO2() string {
	if o == nil || o.ISO2 == nil {
		var ret string
		return ret
	}
	return *o.ISO2
}

// GetISO2Ok returns a tuple with the ISO2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCode) GetISO2Ok() (*string, bool) {
	if o == nil || o.ISO2 == nil {
		return nil, false
	}
	return o.ISO2, true
}

// HasISO2 returns a boolean if a field has been set.
func (o *CountryCode) HasISO2() bool {
	if o != nil && o.ISO2 != nil {
		return true
	}

	return false
}

// SetISO2 gets a reference to the given string and assigns it to the ISO2 field.
func (o *CountryCode) SetISO2(v string) {
	o.ISO2 = &v
}

// GetCallingCode returns the CallingCode field value if set, zero value otherwise.
func (o *CountryCode) GetCallingCode() int32 {
	if o == nil || o.CallingCode == nil {
		var ret int32
		return ret
	}
	return *o.CallingCode
}

// GetCallingCodeOk returns a tuple with the CallingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCode) GetCallingCodeOk() (*int32, bool) {
	if o == nil || o.CallingCode == nil {
		return nil, false
	}
	return o.CallingCode, true
}

// HasCallingCode returns a boolean if a field has been set.
func (o *CountryCode) HasCallingCode() bool {
	if o != nil && o.CallingCode != nil {
		return true
	}

	return false
}

// SetCallingCode gets a reference to the given int32 and assigns it to the CallingCode field.
func (o *CountryCode) SetCallingCode(v int32) {
	o.CallingCode = &v
}

func (o CountryCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryName != nil {
		toSerialize["CountryName"] = o.CountryName
	}
	if o.ISO3 != nil {
		toSerialize["ISO3"] = o.ISO3
	}
	if o.ISO2 != nil {
		toSerialize["ISO2"] = o.ISO2
	}
	if o.CallingCode != nil {
		toSerialize["CallingCode"] = o.CallingCode
	}
	return json.Marshal(toSerialize)
}

type NullableCountryCode struct {
	value *CountryCode
	isSet bool
}

func (v NullableCountryCode) Get() *CountryCode {
	return v.value
}

func (v *NullableCountryCode) Set(val *CountryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCode(val *CountryCode) *NullableCountryCode {
	return &NullableCountryCode{value: val, isSet: true}
}

func (v NullableCountryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
