/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlanLimits struct for PlanLimits
type PlanLimits struct {
	References       *map[string]string `json:"references,omitempty"`
	OrganizationGuid *string            `json:"organization_guid,omitempty"`
	PlanLimits       *[]PlanLimit       `json:"plan_limits,omitempty"`
}

// NewPlanLimits instantiates a new PlanLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanLimits() *PlanLimits {
	this := PlanLimits{}
	return &this
}

// NewPlanLimitsWithDefaults instantiates a new PlanLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanLimitsWithDefaults() *PlanLimits {
	this := PlanLimits{}
	return &this
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *PlanLimits) GetReferences() map[string]string {
	if o == nil || o.References == nil {
		var ret map[string]string
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanLimits) GetReferencesOk() (*map[string]string, bool) {
	if o == nil || o.References == nil {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *PlanLimits) HasReferences() bool {
	if o != nil && o.References != nil {
		return true
	}

	return false
}

// SetReferences gets a reference to the given map[string]string and assigns it to the References field.
func (o *PlanLimits) SetReferences(v map[string]string) {
	o.References = &v
}

// GetOrganizationGuid returns the OrganizationGuid field value if set, zero value otherwise.
func (o *PlanLimits) GetOrganizationGuid() string {
	if o == nil || o.OrganizationGuid == nil {
		var ret string
		return ret
	}
	return *o.OrganizationGuid
}

// GetOrganizationGuidOk returns a tuple with the OrganizationGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanLimits) GetOrganizationGuidOk() (*string, bool) {
	if o == nil || o.OrganizationGuid == nil {
		return nil, false
	}
	return o.OrganizationGuid, true
}

// HasOrganizationGuid returns a boolean if a field has been set.
func (o *PlanLimits) HasOrganizationGuid() bool {
	if o != nil && o.OrganizationGuid != nil {
		return true
	}

	return false
}

// SetOrganizationGuid gets a reference to the given string and assigns it to the OrganizationGuid field.
func (o *PlanLimits) SetOrganizationGuid(v string) {
	o.OrganizationGuid = &v
}

// GetPlanLimits returns the PlanLimits field value if set, zero value otherwise.
func (o *PlanLimits) GetPlanLimits() []PlanLimit {
	if o == nil || o.PlanLimits == nil {
		var ret []PlanLimit
		return ret
	}
	return *o.PlanLimits
}

// GetPlanLimitsOk returns a tuple with the PlanLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanLimits) GetPlanLimitsOk() (*[]PlanLimit, bool) {
	if o == nil || o.PlanLimits == nil {
		return nil, false
	}
	return o.PlanLimits, true
}

// HasPlanLimits returns a boolean if a field has been set.
func (o *PlanLimits) HasPlanLimits() bool {
	if o != nil && o.PlanLimits != nil {
		return true
	}

	return false
}

// SetPlanLimits gets a reference to the given []PlanLimit and assigns it to the PlanLimits field.
func (o *PlanLimits) SetPlanLimits(v []PlanLimit) {
	o.PlanLimits = &v
}

func (o PlanLimits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.References != nil {
		toSerialize["references"] = o.References
	}
	if o.OrganizationGuid != nil {
		toSerialize["organization_guid"] = o.OrganizationGuid
	}
	if o.PlanLimits != nil {
		toSerialize["plan_limits"] = o.PlanLimits
	}
	return json.Marshal(toSerialize)
}

type NullablePlanLimits struct {
	value *PlanLimits
	isSet bool
}

func (v NullablePlanLimits) Get() *PlanLimits {
	return v.value
}

func (v *NullablePlanLimits) Set(val *PlanLimits) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanLimits) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanLimits(val *PlanLimits) *NullablePlanLimits {
	return &NullablePlanLimits{value: val, isSet: true}
}

func (v NullablePlanLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
