/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPreference struct for UserPreference
type UserPreference struct {
	Created    *string `json:"created,omitempty"`
	IsActive   *bool   `json:"is_active,omitempty"`
	Modified   *string `json:"modified,omitempty"`
	Value      *string `json:"value,omitempty"`
	Preference *string `json:"preference,omitempty"`
	Login      *string `json:"login,omitempty"`
	Expired    *bool   `json:"expired,omitempty"`
	LastSeen   *string `json:"last_seen,omitempty"`
}

// NewUserPreference instantiates a new UserPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreference() *UserPreference {
	this := UserPreference{}
	return &this
}

// NewUserPreferenceWithDefaults instantiates a new UserPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferenceWithDefaults() *UserPreference {
	this := UserPreference{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UserPreference) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UserPreference) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *UserPreference) SetCreated(v string) {
	o.Created = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *UserPreference) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UserPreference) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *UserPreference) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *UserPreference) GetModified() string {
	if o == nil || o.Modified == nil {
		var ret string
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetModifiedOk() (*string, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *UserPreference) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given string and assigns it to the Modified field.
func (o *UserPreference) SetModified(v string) {
	o.Modified = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UserPreference) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UserPreference) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UserPreference) SetValue(v string) {
	o.Value = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *UserPreference) GetPreference() string {
	if o == nil || o.Preference == nil {
		var ret string
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetPreferenceOk() (*string, bool) {
	if o == nil || o.Preference == nil {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *UserPreference) HasPreference() bool {
	if o != nil && o.Preference != nil {
		return true
	}

	return false
}

// SetPreference gets a reference to the given string and assigns it to the Preference field.
func (o *UserPreference) SetPreference(v string) {
	o.Preference = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *UserPreference) GetLogin() string {
	if o == nil || o.Login == nil {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetLoginOk() (*string, bool) {
	if o == nil || o.Login == nil {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *UserPreference) HasLogin() bool {
	if o != nil && o.Login != nil {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *UserPreference) SetLogin(v string) {
	o.Login = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *UserPreference) GetExpired() bool {
	if o == nil || o.Expired == nil {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetExpiredOk() (*bool, bool) {
	if o == nil || o.Expired == nil {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *UserPreference) HasExpired() bool {
	if o != nil && o.Expired != nil {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *UserPreference) SetExpired(v bool) {
	o.Expired = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *UserPreference) GetLastSeen() string {
	if o == nil || o.LastSeen == nil {
		var ret string
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetLastSeenOk() (*string, bool) {
	if o == nil || o.LastSeen == nil {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *UserPreference) HasLastSeen() bool {
	if o != nil && o.LastSeen != nil {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given string and assigns it to the LastSeen field.
func (o *UserPreference) SetLastSeen(v string) {
	o.LastSeen = &v
}

func (o UserPreference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Preference != nil {
		toSerialize["preference"] = o.Preference
	}
	if o.Login != nil {
		toSerialize["login"] = o.Login
	}
	if o.Expired != nil {
		toSerialize["expired"] = o.Expired
	}
	if o.LastSeen != nil {
		toSerialize["last_seen"] = o.LastSeen
	}
	return json.Marshal(toSerialize)
}

type NullableUserPreference struct {
	value *UserPreference
	isSet bool
}

func (v NullableUserPreference) Get() *UserPreference {
	return v.value
}

func (v *NullableUserPreference) Set(val *UserPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreference(val *UserPreference) *NullableUserPreference {
	return &NullableUserPreference{value: val, isSet: true}
}

func (v NullableUserPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
