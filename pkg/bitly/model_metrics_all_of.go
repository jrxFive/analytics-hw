/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetricsAllOf struct for MetricsAllOf
type MetricsAllOf struct {
	Metrics *[]Metric `json:"metrics,omitempty"`
}

// NewMetricsAllOf instantiates a new MetricsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsAllOf() *MetricsAllOf {
	this := MetricsAllOf{}
	return &this
}

// NewMetricsAllOfWithDefaults instantiates a new MetricsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsAllOfWithDefaults() *MetricsAllOf {
	this := MetricsAllOf{}
	return &this
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *MetricsAllOf) GetMetrics() []Metric {
	if o == nil || o.Metrics == nil {
		var ret []Metric
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsAllOf) GetMetricsOk() (*[]Metric, bool) {
	if o == nil || o.Metrics == nil {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *MetricsAllOf) HasMetrics() bool {
	if o != nil && o.Metrics != nil {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []Metric and assigns it to the Metrics field.
func (o *MetricsAllOf) SetMetrics(v []Metric) {
	o.Metrics = &v
}

func (o MetricsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metrics != nil {
		toSerialize["metrics"] = o.Metrics
	}
	return json.Marshal(toSerialize)
}

type NullableMetricsAllOf struct {
	value *MetricsAllOf
	isSet bool
}

func (v NullableMetricsAllOf) Get() *MetricsAllOf {
	return v.value
}

func (v *NullableMetricsAllOf) Set(val *MetricsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsAllOf(val *MetricsAllOf) *NullableMetricsAllOf {
	return &NullableMetricsAllOf{value: val, isSet: true}
}

func (v NullableMetricsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
