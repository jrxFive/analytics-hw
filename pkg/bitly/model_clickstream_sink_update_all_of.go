/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClickstreamSinkUpdateAllOf struct for ClickstreamSinkUpdateAllOf
type ClickstreamSinkUpdateAllOf struct {
	// False if sink should be activated
	Deactivated *bool `json:"deactivated,omitempty"`
	// Delivery schedule
	Schedule *string `json:"schedule,omitempty"`
}

// NewClickstreamSinkUpdateAllOf instantiates a new ClickstreamSinkUpdateAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickstreamSinkUpdateAllOf() *ClickstreamSinkUpdateAllOf {
	this := ClickstreamSinkUpdateAllOf{}
	return &this
}

// NewClickstreamSinkUpdateAllOfWithDefaults instantiates a new ClickstreamSinkUpdateAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickstreamSinkUpdateAllOfWithDefaults() *ClickstreamSinkUpdateAllOf {
	this := ClickstreamSinkUpdateAllOf{}
	return &this
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *ClickstreamSinkUpdateAllOf) GetDeactivated() bool {
	if o == nil || o.Deactivated == nil {
		var ret bool
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkUpdateAllOf) GetDeactivatedOk() (*bool, bool) {
	if o == nil || o.Deactivated == nil {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *ClickstreamSinkUpdateAllOf) HasDeactivated() bool {
	if o != nil && o.Deactivated != nil {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given bool and assigns it to the Deactivated field.
func (o *ClickstreamSinkUpdateAllOf) SetDeactivated(v bool) {
	o.Deactivated = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ClickstreamSinkUpdateAllOf) GetSchedule() string {
	if o == nil || o.Schedule == nil {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickstreamSinkUpdateAllOf) GetScheduleOk() (*string, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ClickstreamSinkUpdateAllOf) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *ClickstreamSinkUpdateAllOf) SetSchedule(v string) {
	o.Schedule = &v
}

func (o ClickstreamSinkUpdateAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Deactivated != nil {
		toSerialize["deactivated"] = o.Deactivated
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	return json.Marshal(toSerialize)
}

type NullableClickstreamSinkUpdateAllOf struct {
	value *ClickstreamSinkUpdateAllOf
	isSet bool
}

func (v NullableClickstreamSinkUpdateAllOf) Get() *ClickstreamSinkUpdateAllOf {
	return v.value
}

func (v *NullableClickstreamSinkUpdateAllOf) Set(val *ClickstreamSinkUpdateAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableClickstreamSinkUpdateAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableClickstreamSinkUpdateAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickstreamSinkUpdateAllOf(val *ClickstreamSinkUpdateAllOf) *NullableClickstreamSinkUpdateAllOf {
	return &NullableClickstreamSinkUpdateAllOf{value: val, isSet: true}
}

func (v NullableClickstreamSinkUpdateAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickstreamSinkUpdateAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
