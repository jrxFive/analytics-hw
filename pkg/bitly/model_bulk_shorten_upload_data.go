/*
Bitly API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.0
Contact: api@bitly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BulkShortenUploadData struct for BulkShortenUploadData
type BulkShortenUploadData struct {
	Headers   map[string]interface{} `json:"headers"`
	UploadUrl string                 `json:"upload_url"`
	Bucket    string                 `json:"bucket"`
	Filename  string                 `json:"filename"`
}

// NewBulkShortenUploadData instantiates a new BulkShortenUploadData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkShortenUploadData(headers map[string]interface{}, uploadUrl string, bucket string, filename string) *BulkShortenUploadData {
	this := BulkShortenUploadData{}
	this.Headers = headers
	this.UploadUrl = uploadUrl
	this.Bucket = bucket
	this.Filename = filename
	return &this
}

// NewBulkShortenUploadDataWithDefaults instantiates a new BulkShortenUploadData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkShortenUploadDataWithDefaults() *BulkShortenUploadData {
	this := BulkShortenUploadData{}
	return &this
}

// GetHeaders returns the Headers field value
func (o *BulkShortenUploadData) GetHeaders() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *BulkShortenUploadData) GetHeadersOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *BulkShortenUploadData) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetUploadUrl returns the UploadUrl field value
func (o *BulkShortenUploadData) GetUploadUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value
// and a boolean to check if the value has been set.
func (o *BulkShortenUploadData) GetUploadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadUrl, true
}

// SetUploadUrl sets field value
func (o *BulkShortenUploadData) SetUploadUrl(v string) {
	o.UploadUrl = v
}

// GetBucket returns the Bucket field value
func (o *BulkShortenUploadData) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *BulkShortenUploadData) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *BulkShortenUploadData) SetBucket(v string) {
	o.Bucket = v
}

// GetFilename returns the Filename field value
func (o *BulkShortenUploadData) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *BulkShortenUploadData) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *BulkShortenUploadData) SetFilename(v string) {
	o.Filename = v
}

func (o BulkShortenUploadData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["headers"] = o.Headers
	}
	if true {
		toSerialize["upload_url"] = o.UploadUrl
	}
	if true {
		toSerialize["bucket"] = o.Bucket
	}
	if true {
		toSerialize["filename"] = o.Filename
	}
	return json.Marshal(toSerialize)
}

type NullableBulkShortenUploadData struct {
	value *BulkShortenUploadData
	isSet bool
}

func (v NullableBulkShortenUploadData) Get() *BulkShortenUploadData {
	return v.value
}

func (v *NullableBulkShortenUploadData) Set(val *BulkShortenUploadData) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkShortenUploadData) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkShortenUploadData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkShortenUploadData(val *BulkShortenUploadData) *NullableBulkShortenUploadData {
	return &NullableBulkShortenUploadData{value: val, isSet: true}
}

func (v NullableBulkShortenUploadData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkShortenUploadData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
